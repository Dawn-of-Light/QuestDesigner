<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NETXP.Controls.Bars</name>
    </assembly>
    <members>
        <member name="T:NETXP.Controls.Bars.CommandBar">
            <summary>
            The command bar control. You can add this to a form or a container control.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.#ctor">
            <summary>
            Creates a command bar.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.Finalize">
            <summary>
            Destroys the command bar.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.OnSizeChanged(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.OnParentChanged(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.Float(System.Drawing.Point,NETXP.Controls.Bars.CommandBarDock)">
            <summary>
            Undocks the command bar from the parent.
            </summary>
            <param name="pt">The point where the floating form will be shown.</param>
            <param name="parent">The parent of the command bar.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.GetItemRect(NETXP.Controls.Bars.CommandBarItem)">
            <summary>
            Gets the bounds of an item.
            </summary>
            <param name="item">The item.</param>
            <returns>The item's bounds.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.GetNumRects">
            <summary>
            Gets the number of item rectangles.
            </summary>
            <returns>The number of item rectangles.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.SetHotItem(NETXP.Controls.Bars.CommandBarItem)">
            <summary>
            Assigns a new hot item.
            </summary>
            <param name="item">The new hot item.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.GetHotItem">
            <summary>
            Gets the current hot item.
            </summary>
            <returns>The hot item.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.Dispose(System.Boolean)">
            <summary>
            Internal
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.UpdateSize">
            <summary>
            Updates the size of the command bar control.
            This causes the control to have the most compact size possible,
            depending on the items it is displaying.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.UpdateItems">
            <summary>
            Redraws items and resizes the control.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
            Processes messages received from Windows.
            </summary>
            <param name="message">The message.</param>
            <returns>Internal. Do not use.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.UpdateHotItem(System.Int32,System.Int32)">
            <summary>
            Refreshes the control.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.SetHotItem(System.Int32,System.Boolean)">
            <summary>
            Sets the hot item.
            </summary>
            <param name="index">Index of new hot item.</param>
            <param name="stillTracking">Should the new hot item be drawn "dropped down"?</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.PreProcessKeyDown(System.Windows.Forms.Message@)">
            <summary>
            Processes key down messages.
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.PreProcessMnemonic(System.Windows.Forms.Keys)">
            <summary>
            Processes mnemonic keys.
            </summary>
            <param name="keyCode"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.HitTest(System.Drawing.Point,System.Boolean)">
            <summary>
            Performs a hit test for an item.
            </summary>
            <param name="point">Point where user clicked.</param>
            <param name="includeDisabled">Hit test disabled items as well?</param>
            <returns>Item index at that location. -1 if no items were hit.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.TrackDropDown(System.Boolean)">
            <summary>
            Tracks a drop down menu for the selected item.
            </summary>
            <param name="keyboard">Was the menu activated by keyboard?</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.ProcessMouseMove(System.Drawing.Point)">
            <summary>
            Processes mouse-move messages.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.OnMouseLeave(System.EventArgs)">
            <summary>
            Internal event handler.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.ProcessMouseDown(System.Drawing.Point)">
            <summary>
            Processes mouse-down messages.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.HideBar">
            <summary>
            Hides this command bar. Use this method instead of just setting the Visible property.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.ShowBar">
            <summary>
            Shows this command bar. Use this method instead of just setting the Visible property.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.DrawItem(System.Drawing.Graphics,NETXP.Controls.Bars.CommandBarItem,System.Int32)">
            <summary>
            Draws an item.
            </summary>
            <param name="g">Graphics object.</param>
            <param name="item">Item to draw.</param>
            <param name="index">Index of item to draw.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.PartiallyHidden(System.Drawing.Rectangle)">
            <summary>
            Is an item partially hidden (i.e. clipped)?
            </summary>
            <param name="rect">Item's rectangle.</param>
            <returns>Is the rectangle outside of control's bounds?</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.DoPaint(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Paints the command bar.
            </summary>
            <param name="g">Graphics object.</param>
            <param name="clipRect">Clip rectangle.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.BeginInit">
            <summary>
            Begins initialization. Suspends all redraw operations.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.EndInit">
            <summary>
            Ends initialization. Redraws the control.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBar.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Internal
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBar.Customize">
            <summary>
            Raised when the Cutomize Toolbar menu item has been clicked.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBar.TornOff">
            <summary>
            Raised when the command bar has been torn off (undocked).
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBar.SnappedOn">
            <summary>
            Raised when the command bar has been snapped back on (redocked).
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBar.SetupChevronMenu">
            <summary>
            Handle this event if you wish to customize the expansion item menu.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBar.ShowGripperChanged">
            <summary>
            Raised when the command bar has been locked or unlocked.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.DefaultSize">
            <summary>
            The control's initial size.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.BackColor">
            <summary>
            Gets or sets the background color of this command bar.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.BackgroundImage">
            <summary>
            Gets or sets the background image for this command bar.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.MenuEnabled">
            <summary>
            If false, the menu will become grayed out (i.e. when the window is deactivated)
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.CustomBackground">
            <summary>
            If true, the command bar will not draw its default background. Only available for bars outside of dock containers.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.ShowGripper">
            <summary>
            If true, a gripper will be shown, allowing the user to move the command bar.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.Style">
            <summary>
            The style (can be Menu or Toolbar)
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.RightAlignChevronMenu">
            <summary>
            Gets or sets if the chevron menu is right-aligned.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.AllowClose">
            <summary>
            Gets or sets if the bar's floating window can be closed by the user.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.AutoFocus">
            <summary>
            Gets or sets if the bar can be automatically focused if the user clicks on it.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.AllowTearOff">
            <summary>
            Gets or sets if the bar can be torn off by the user.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.FullRow">
            <summary>
            Gets or sets if this bar takes up the whole row.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.MdiContainer">
            <summary>
            Gets or sets the MDI container associated with this menu bar.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.Margins">
            <summary>
            Gets the margins (padding) between the command bar's edges and its items.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.FloatingLocation">
            <summary>
            Gets the location of the floating form.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.Text">
            <summary>
            Gets or sets the text of the command bar shown in the title bar of the floating form.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.CustomizeText">
            <summary>
            Gets or setst the text of the Customize command.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.Items">
            <summary>
            The collection of toolbar items on the toolbar or menu.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.EnableCustomize">
            <summary>
            Is the Customize option enabled?
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.RowNumber">
            <summary>
            Gets or sets the row number where this command bar is placed.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.Position">
            <summary>
            Gets or sets the position of this bar within a row.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.Dropped">
            <summary>
            Gets or sets if the command bar's state is Dropped.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.Pushed">
            <summary>
            Gets or sets if the command bar's state is Pushed.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.ClickedArrow">
            <summary>
            Gets or sets if the user clicked a drop down arrow.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.ShowCues">
            <summary>
            Gets if the command bar should show keyboard underlines.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.ID">
            <summary>
            Gets or sets a unique ID for this command bar.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.State">
            <summary>
            Gets this command bar's hot tracking state.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.IsFloating">
            <summary>
            Gets if this bar is floating.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.FloatingForm">
            <summary>
            Gets or sets this bar's floating form.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.Renderer">
            <summary>
            Gets or sets the command bar's renderer.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.ParentDock">
            <summary>
            Gets or sets the command bar's parent dock when floating.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBar.Vertical">
            <summary>
            Gets if this bar is vertical.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarStyle">
            <summary>
            Command bar display style.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.CommandBarStyle.Menu">
            <summary>
            Shows the command bar as a menu. (No button images and asynchronous drop-down menus)
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.CommandBarStyle.ToolBar">
            <summary>
            Shows the command bar as a toolbar.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarState">
            <summary>
            Command bar states.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.CommandBarState.None">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.CommandBarState.Hot">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.CommandBarState.HotTracking">
            <summary>
            Internal.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.TornOffEventHandler">
            <summary>
            Event handler for the TornOff event.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.TornOffEventArgs">
            <summary>
            Event arguments for the TornOff event.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.TornOffEventArgs.#ctor(NETXP.Controls.Bars.FloatingForm)">
            <summary>
            Constructs a TornOffEventArgs object.
            </summary>
            <param name="dockForm">The floating form.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.TornOffEventArgs.DockForm">
            <summary>
            The floating form.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.SetupChevronMenuEventHandler">
            <summary>
            Event handler for the SetupChevronMenu event.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.SetupChevronMenuEventArgs">
            <summary>
            Event arguments for the SetupChevronMenu event.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.SetupChevronMenuEventArgs.#ctor(NETXP.Controls.Bars.CommandBarItemCollection)">
            <summary>
            Constructs a SetupChevronMenuEventArgs object.
            </summary>
            <param name="items">The items shown in the chevron menu. The last two items can be removed if desired.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.SetupChevronMenuEventArgs.Items">
            <summary>
            The items shown in the chevron menu.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.Margins">
            <summary>
            Provides a way to set up margins or padding.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.Margins.#ctor">
            <summary>
            Creates a new Margins object with default values.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.Margins.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Margins object with the given values.
            </summary>
            <param name="left">The left margin.</param>
            <param name="top">The top margin.</param>
            <param name="right">The right margin.</param>
            <param name="bottom">The bottom margin.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.Margins.ToString">
            <summary>
            Gets a string representation of this Margins object.
            </summary>
            <returns>A string representation of this Margins object.</returns>
        </member>
        <member name="E:NETXP.Controls.Bars.Margins.Changed">
            <summary>
            Called when the Margins object has changed.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.Margins.Left">
            <summary>
            Gets or sets the value of the left margin.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.Margins.Top">
            <summary>
            Gets or sets the value of the top margin.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.Margins.Right">
            <summary>
            Gets or sets the value of the right margin.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.Margins.Bottom">
            <summary>
            Gets or sets the value of the bottom margin.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarButtonItem">
            <summary>
            The command bar button item.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarItem">
            <summary>
            This class describes one item on the command bar.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates a command bar item for use inside a designer.
            </summary>
            <param name="container">The container for this item.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.#ctor">
            <summary>
            Creates a command bar item with default options.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Constructs a command bar item with specified text and Click event handler.
            </summary>
            <param name="text">Text to display.</param>
            <param name="onClick">Click event handler.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.#ctor(System.String)">
            <summary>
            Constructs a command bar item with specified text.
            </summary>
            <param name="text">Text to display.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.Initialize">
            <summary>
            Resets the item to default properties.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.CalculateSize(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics)">
            <summary>
            Calculates the size of this command bar item on a command bar.
            </summary>
            <param name="parent">The command bar.</param>
            <param name="g">The graphics object.</param>
            <returns>The size of the item.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.CalculateSizeMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics)">
            <summary>
            Calculates the size of this command bar item on a popup menu.
            </summary>
            <param name="parent">The popup menu.</param>
            <param name="g">The graphics object.</param>
            <returns>The size of the item.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.Draw(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            Draws the command bar item on a command bar.
            </summary>
            <param name="parent">The command bar.</param>
            <param name="g">The graphics object.</param>
            <param name="state">The item's draw state.</param>
            <param name="rect">The item's bounds rectangle.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.DrawMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            Draws the command bar item on a popup menu.
            </summary>
            <param name="parent">The popup menu.</param>
            <param name="g">The graphics object.</param>
            <param name="state">The item's draw state.</param>
            <param name="rect">The item's bounds rectangle.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.ProcessMouseUp(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes a MouseUp event.
            </summary>
            <param name="parent">The command bar.</param>
            <param name="e">The mouse event args.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.ProcessMouseMove(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes a MouseMove event.
            </summary>
            <param name="parent">The command bar.</param>
            <param name="e">The mouse event args.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.ProcessMouseDown(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Processes a MouseDown event.
            </summary>
            <param name="parent">The command bar.</param>
            <param name="e">The mouse event args.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.OnContainerChanged">
            <summary>
            Called when the container control changed.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.OnBoundsChanged">
            <summary>
            Called when the item's bounds rectangle changed.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.SuspendEvents">
            <summary>
            Suspends events.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.ResumeEvents">
            <summary>
            Resumes events.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItem.ToString">
            <summary>
            Gives a string representation of this item.
            </summary>
            <returns>The string</returns>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBarItem.Changed">
            <summary>
            Called when the item's properties are changed.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBarItem.Click">
            <summary>
            Called when the item is clicked.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBarItem.Hover">
            <summary>
            Called when the mouse moves over the item.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBarItem.Leave">
            <summary>
            Called when the mouse has left the item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarItem.Visible">
            <summary>
            Is this item visible?
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarItem.Infrequent">
            <summary>
            Is this item infrequent?
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarItem.Text">
            <summary>
            The item's text.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarItem.Enabled">
            <summary>
            Is this item enabled?
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarItem.PadHorizontal">
            <summary>
            The item's horizontal padding.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarItem.PadVertical">
            <summary>
            The item's vertical padding.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarItem.Tag">
            <summary>
            An object associated with this item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarItem.ContainerControl">
            <summary>
            The item's container control.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarItem.MenuSelectable">
            <summary>
            Can this item be selected in a menu?
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Constructs a new command bar button item with the given text and event handler.
            </summary>
            <param name="text">The text of the item.</param>
            <param name="onClick">The Click event handler.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.#ctor(System.String)">
            <summary>
            Constructs a new command bar button item with the given text.
            </summary>
            <param name="text">The text of the item.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.#ctor">
            <summary>
            Constructs an empty command bar button item.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.Initialize">
            <summary>
            Resets the item to default properties.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.Dispose(System.Boolean)">
            <summary>
            Internal
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.OnBoundsChanged">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.OnContainerChanged">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.ProcessMouseDown(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.ProcessMouseMove(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.ProcessMouseUp(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.Draw(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.DrawMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.CalculateSizeMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.CalculateSize(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarButtonItem.ItemsChanged(System.Object,System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBarButtonItem.DropDown">
            <summary>
            Called when a dropdown menu is shown. Cancel the event in order to avoid showing the default popup menu.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarButtonItem.Image">
            <summary>
            The item's image.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarButtonItem.HotImage">
            <summary>
            The item's hot image.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarButtonItem.CheckType">
            <summary>
            How the item displays checkmarks.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarButtonItem.DropUp">
            <summary>
            Gets or sets if this item is dropped up instead of down.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarButtonItem.Shortcut">
            <summary>
            The item's shortcut key (if a menu item).
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarButtonItem.Checked">
            <summary>
            Is this item checked (depressed)?
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarButtonItem.ShowText">
            <summary>
            Does this item show its text?
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarButtonItem.DefaultItem">
            <summary>
            Does this item show its text bold when shown on a menu?
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarButtonItem.Style">
            <summary>
            The item's display style.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarButtonItem.Items">
            <summary>
            A collection of CommandBarItem objects shown in the submenu of this item.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBarButtonItem.Enter">
            <summary>
            See IStatusMessageProvider.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ButtonItemStyle">
            <summary>
            The command bar button item behavior style.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ButtonItemStyle.Command">
            <summary>
            Item behaves like a command button.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ButtonItemStyle.DropDown">
            <summary>
            Item has a dropdown menu.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ButtonItemCheckType">
            <summary>
            The command bar button item checkmark style.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ButtonItemCheckType.Checkmark">
            <summary>
            Item uses checkmark.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ButtonItemCheckType.Radio">
            <summary>
            Item uses radio dot.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarComboBox">
            <summary>
            A special combo box.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.#ctor">
            <summary>
            Constructs a new combo box item.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.OnHandleCreated(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.OnHandleDestroyed(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.OnLostFocus(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Internal
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.OnGotFocus(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.OnMouseLeave(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.OnMouseEnter(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="pevent"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboBox.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal
            </summary>
            <param name="m"></param>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarComboBox.Renderer">
            <summary>
            Gets or sets the renderer for the combo box.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarComboBox.DesignMode">
            <summary>
            Internal
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.DrawStyle">
            <summary>
            Defines how to draw the combo box.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.DrawStyle.Normal">
            <summary>
            Normal combo box.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.DrawStyle.Raised">
            <summary>
            Mouse over.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.DrawStyle.Pressed">
            <summary>
            Pushed.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarComboItem">
            <summary>
            Combo box item.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Constructs a combo box item with specified text and Click event handler.
            </summary>
            <param name="text">Text to display.</param>
            <param name="onClick">Click event handler.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.#ctor(System.String)">
            <summary>
            Constructs a combo box item with specified text.
            </summary>
            <param name="text">Text to display.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.#ctor">
            <summary>
            Creates a combo box item with default options.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.Initialize">
            <summary>
            Resets the item to default properties.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.Dispose(System.Boolean)">
            <summary>
            Internal
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.ProcessMouseDown(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.ProcessMouseMove(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.ProcessMouseUp(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.CalculateSize(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.CalculateSizeMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.DrawMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.Draw(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.OnContainerChanged">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarComboItem.OnBoundsChanged">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarComboItem.Combo">
            <summary>
            Gets the combo box within this item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarComboItem.Style">
            <summary>
            Gets or sets the combo box style.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarComboItem.Width">
            <summary>
            Gets or sets the combo box width.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarComboItem.ComboText">
            <summary>
            Gets or sets the combo box text.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarComboItem.Items">
            <summary>
            Gets the items in the combo box.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarComboItem.MenuSelectable">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarComboItem.Site">
            <summary>
            Internal
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarControlItem">
            <summary>
            A command bar item that contains a control.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.#ctor(System.String,System.EventHandler)">
            <summary>
            Constructs a control item with specified text and Click event handler.
            </summary>
            <param name="text">Text to display.</param>
            <param name="onClick">Click event handler.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.#ctor(System.String)">
            <summary>
            Constructs a control item with specified text.
            </summary>
            <param name="text">Text to display.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.#ctor">
            <summary>
            Creates a control box item with default options.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.Initialize">
            <summary>
            Resets the item to default properties.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.CalculateSize(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.Draw(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.ProcessMouseDown(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.ProcessMouseMove(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.ProcessMouseUp(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.CalculateSizeMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.DrawMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.OnContainerChanged">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.Dispose(System.Boolean)">
            <summary>
            Internal
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.OnBoundsChanged">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarControlItem.CommandBarControlItem_Changed(System.Object,NETXP.Controls.Bars.CommandBarItemChangedEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarControlItem.Control">
            <summary>
            Gets or sets the control associated with this item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarControlItem.Width">
            <summary>
            Gets or sets the width of this item's control.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarControlItem.Height">
            <summary>
            Gets or sets the height of this item's control.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarControlItem.MenuSelectable">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarDock">
            <summary>
            A command bar container control which manages multiple command bars.
            This should not be added at design time.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarDock.#ctor">
            <summary>
            Constructs a new control bar with default parameters.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarDock.CreateControlsInstance">
            <summary>
            Internal
            </summary>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarDock.GetFreeRow">
            <summary>
            Gets the next free row.
            </summary>
            <returns>A row number.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarDock.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="levent"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarDock.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarDock.UpdateLayout(NETXP.Controls.Bars.CommandBar)">
            <summary>
            Lays out the bars.
            </summary>
            <param name="lastBar">Optional. The last bar to lay out.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarDock.Dock">
            <summary>
            Gets or sets the dock style for the command bar dock.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarDock.ForeColor">
            <summary>
            Hides an inherited property.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarDock.BackColor">
            <summary>
            Hides an inherited property.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarDock.BackgroundImage">
            <summary>
            Hides an inherited property.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarDock.Orientation">
            <summary>
            Gets the orientation for this control based on the dock style.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarDock.IsVertical">
            <summary>
            Is this control vertical?
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarDock.IsRTL">
            <summary>
            Is this control right-to-left?
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarDock.IsDesignMode">
            <summary>
            Is this control in design mode?
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarDock.Manager">
            <summary>
            Gets or sets the command bar manager associated with this command bar dock.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarPositionComparer.Compare(System.Object,System.Object)">
            <summary>
            Internal
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarExpansionItem">
            <summary>
            Internal
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarExpansionItem.DrawMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarExpansionItem.Draw(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarExpansionItem.CalculateSize(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarExpansionItem.CalculateSizeMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarItemChangedEventArgs">
            <summary>
            Defines event arguments for the ItemChanged event.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes the event arguments.
            </summary>
            <param name="sizeChanged">Has the item's size changed?</param>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarItemChangedEventArgs.SizeChanged">
            <summary>
            Has the item's size changed?
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarItemChangedEventHandler">
            <summary>
            Handles the Item.Changed event.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarItemCollection">
            <summary>
            A collection of CommandBarItem objects.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.#ctor">
            <summary>
            Creates a new collection.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies this collection's items into an array.
            </summary>
            <param name="array">The array.</param>
            <param name="index">The index at which to start copying.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.OnClearComplete">
            <summary>
            Responds to an event.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Responds to an event.
            </summary>
            <param name="index">Internal</param>
            <param name="value">Internal</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Responds to an event.
            </summary>
            <param name="index">Internal</param>
            <param name="value">Internal</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Responds to an event.
            </summary>
            <param name="index">Internal</param>
            <param name="oldValue">Internal</param>
            <param name="newValue">Internal</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.Add(NETXP.Controls.Bars.CommandBarItem)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
            <returns>The index where the item was added.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.AddRange(NETXP.Controls.Bars.CommandBarItem[])">
            <summary>
            Adds a set of items to the collection.
            </summary>
            <param name="items">The array of items to add.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.MoveUp(NETXP.Controls.Bars.CommandBarItem)">
            <summary>
            Moves an item up the list.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.MoveDown(NETXP.Controls.Bars.CommandBarItem)">
            <summary>
            Moves an item down the list.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.Insert(System.Int32,NETXP.Controls.Bars.CommandBarItem)">
            <summary>
            Inserts an item at a specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes an item at a specified index.
            </summary>
            <param name="index">The index to remove at.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.Remove(NETXP.Controls.Bars.CommandBarItem)">
            <summary>
            Removes an item.
            </summary>
            <param name="item">The item to remove.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.Contains(NETXP.Controls.Bars.CommandBarItem)">
            <summary>
            Checks if the collection contains a certain item.
            </summary>
            <param name="item">The item</param>
            <returns>True if the collection contains this item.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.IndexOf(NETXP.Controls.Bars.CommandBarItem)">
            <summary>
            Gets the index of an item.
            </summary>
            <param name="item">The item.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarItemCollection.RaiseChanged">
            <summary>
            Raises a Changed event.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarItemCollection.SuppressEvents">
            <summary>
            Should events be suppressed?
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBarItemCollection.Changed">
            <summary>
            Called when the collection has changed.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarItemCollection.Item(System.Int32)">
            <summary>
            Retrieves an item at an index.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarLabelItem">
            <summary>
            A label item.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarLabelItem.#ctor(System.String)">
            <summary>
            Constructs a new label item with the given text.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarLabelItem.#ctor">
            <summary>
            Constructs a new label item with default options.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarLabelItem.Initialize">
            <summary>
            Resets to default options.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarLabelItem.OnBoundsChanged">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarLabelItem.OnContainerChanged">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarLabelItem.ProcessMouseDown(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarLabelItem.ProcessMouseMove(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarLabelItem.ProcessMouseUp(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarLabelItem.Draw(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarLabelItem.DrawMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarLabelItem.CalculateSizeMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarLabelItem.CalculateSize(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarLabelItem.Enabled">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarLabelItem.MenuSelectable">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarManager">
            <summary>
            This component manages the command bars on your form.
            This includes saving and loading layouts, providing tear-off functionality, and
            allowing the bars to dock to any side of the form.
            </summary>
            <remarks>
            This is the component you should add to your form in order to obtain command bar
            functionality. You may also add a single command bar, but it will be locked.
            </remarks>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.#ctor">
            <summary>
            Creates a new command bar manager.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.AttachCommandBar(NETXP.Controls.Bars.CommandBar)">
            <summary>
            Use this method to explicitly add a command bar to the manager without necessarily adding it to a dock.
            </summary>
            <param name="bar">The command bar to add.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.GetCommandBar(System.Int32)">
            <summary>
            Gets a command bar with the given ID.
            </summary>
            <param name="id">The ID of the command bar.</param>
            <returns>The command bar, if any. Null if no command bar is found.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.GetCommandBars">
            <summary>
            Returns the collection of command bars managed by the command bar manager.
            </summary>
            <returns>The collection.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.DetachCommandBar(NETXP.Controls.Bars.CommandBar)">
            <summary>
            Use this method to explicitly remove a command bar from the manager without necessarily removing it from a dock.
            </summary>
            <param name="bar">The command bar to remove.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.SaveLayout(System.IO.Stream,System.Boolean)">
            <summary>
            Saves the current layout to a stream. Can be written as binary or as XML.
            </summary>
            <param name="file">The stream. Not necessarily a file.</param>
            <param name="binary">Is this a binary stream? If not, write as XML.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.LoadLayout(System.IO.Stream,System.Boolean)">
            <summary>
            Loads the current layout from a stream. Can be read as binary or as XML.
            </summary>
            <param name="file">The stream. Not necessarily a file.</param>
            <param name="binary">Is this a binary stream? If not, read as XML.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.SaveLayout(System.Xml.XmlWriter)">
            <summary>
            Saves the layout to an XML stream.
            </summary>
            <param name="outStream">The XML stream.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.LoadLayout(System.Xml.XmlReader)">
            <summary>
            Loads the layout from an XML stream.
            </summary>
            <param name="inStream">The XML stream.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.SaveLayout(System.IO.BinaryWriter)">
            <summary>
            Saves the layout to a binary stream.
            </summary>
            <param name="outStream">The stream.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.LoadLayout(System.IO.BinaryReader)">
            <summary>
            Loads the layout from a binary stream.
            </summary>
            <param name="inStream">The stream.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.SaveLayout(Microsoft.Win32.RegistryKey)">
            <summary>
            Saves the layout to a registry key.
            </summary>
            <param name="key">The root key.</param>
            <remarks>
            Each command bar's layout is saved under a different subkey,
            whose name is based on the command bar's ID.
            </remarks>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.LoadLayout(Microsoft.Win32.RegistryKey)">
            <summary>
            Loads the layout from a registry key.
            </summary>
            <param name="key">The root key.</param>
            <remarks>
            Each command bar's layout is loaded from a different subkey,
            whose name is based on the command bar's ID.
            </remarks>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarManager.ResetAutoPersistent(System.Boolean)">
            <summary>
            Reset Automatic State Persistence
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarManager.TopDock">
            <summary>
            Gets or sets the top command bar dock on this form.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarManager.BottomDock">
            <summary>
            Gets or sets the bottom command bar dock on this form.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarManager.LeftDock">
            <summary>
            Gets or sets the left-side command bar dock on this form.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarManager.RightDock">
            <summary>
            Gets or sets the right-side command bar dock on this form.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarManager.Form">
            <summary>
            Gets or sets the form associated with this command bar manager. This must not be null.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarManager.Renderer">
            <summary>
            Gets or sets the renderer used to draw the command bars.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarManager.AutomaticStatePersistence">
            <summary>
            Enable or disable the Automatic State Persistence feature. If enabled the customized layout made by the user is persisted into isolated storage.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarManager.Site">
            <summary>
            Internal. For designer support.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBarManager.LoadingLayout">
            <summary>
            Occurs when auto-persisted layout is being loaded.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBarManager.LoadedLayout">
            <summary>
            Occurs when auto-persisted layout has been loaded.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBarManager.SavingLayout">
            <summary>
            Occurs when auto-persisted layout is being saved.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandBarManager.SavedLayout">
            <summary>
            Occurs when auto-persisted layout has been saved.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.BarSerializeInfo">
            <summary>
            Internal serialization class.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.BarSerializeInfo.Dock">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.BarSerializeInfo.IsFloating">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.BarSerializeInfo.FloatingLocation">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.BarSerializeInfo.RowNumber">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.BarSerializeInfo.RowPosition">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.BarSerializeInfo.ID">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.BarSerializeInfo.Visible">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.BarSerializeInfo.ShowGripper">
            <summary>
            Internal
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.BarSerializeInfo.#ctor">
            <summary>
            Internal
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.DockLocation">
            <summary>
            Internal serialization class.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.DockLocation.Top">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.DockLocation.Left">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.DockLocation.Bottom">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.DockLocation.Right">
            <summary>
            Internal
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarSeparatorItem">
            <summary>
            A separator item.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarSeparatorItem.#ctor">
            <summary>
            Constructs a new separator item.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarSeparatorItem.Initialize">
            <summary>
            Resets the item to default options.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarSeparatorItem.OnBoundsChanged">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarSeparatorItem.OnContainerChanged">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarSeparatorItem.ProcessMouseDown(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarSeparatorItem.ProcessMouseMove(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarSeparatorItem.ProcessMouseUp(NETXP.Controls.Bars.CommandBar,System.Windows.Forms.MouseEventArgs)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarSeparatorItem.CalculateSize(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarSeparatorItem.CalculateSizeMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarSeparatorItem.DrawMenu(NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarSeparatorItem.Draw(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
            <param name="parent"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarSeparatorItem.Enabled">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarSeparatorItem.PadHorizontal">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarSeparatorItem.PadVertical">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarSeparatorItem.Text">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarSeparatorItem.MenuSelectable">
            <summary>
            See <see cref="T:NETXP.Controls.Bars.CommandBarItem"/>
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandContextMenu">
            <summary>
            A context menu with fully customizable look and feel.
            </summary>
            <remarks>
            This menu should not be used with system tray icons.
            </remarks>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandContextMenu.#ctor">
            <summary>
            Constructs a new CommandContextMenu.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandContextMenu.CalculateWindowSize">
            <summary>
            Calculates the menu window's size.
            </summary>
            <returns>The menu window's size.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandContextMenu.Show(System.Drawing.Point)">
            <summary>
            Shows the popup menu at the specified location.
            No source control is provided.
            </summary>
            <param name="pt">Location (in screen coordinates) of the top-left corner of the menu.</param>
            <returns>The command bar item (if any) that the user clicked.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Shows the popup menu at the specified location, using the specified source control.
            </summary>
            <param name="sourceControl">The control responsible for handling menu messages.</param>
            <param name="pt">The location (in sourceControl client coordinates) of the top-left corner of the menu.</param>
            <returns>The command bar item (if any) that the user clicked.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandContextMenu.Show(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Shows the popup menu with four preferred locations.
            </summary>
            <param name="topLeft">The preferred top-left location, in screen coordinates.</param>
            <param name="topRight">The preferred top-right location, in screen coordinates.</param>
            <param name="bottomLeft">The preferred bottom-left location, in screen coordinates.</param>
            <param name="bottomRight">The perferred bottom-right location, in screen coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Shows the popup menu with four preferred locations for the specified source control.
            </summary>
            <param name="sourceControl">The control responsible for handling menu messages.</param>
            <param name="topLeft">The preferred top-left location, in sourceControl client coordinates.</param>
            <param name="topRight">The preferred top-right location, in sourceControl client coordinates.</param>
            <param name="bottomLeft">The preferred bottom-left location, in sourceControl client coordinates.</param>
            <param name="bottomRight">The perferred bottom-right location, in sourceControl client coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandContextMenu.GetItemRect(NETXP.Controls.Bars.CommandBarItem)">
            <summary>
            Gets the rectangle (bounds) of an item.
            </summary>
            <param name="item">The item (must be visible).</param>
            <returns>The bounds rectangle of the item.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandContextMenu.Dismiss">
            <summary>
            Dismisses (closes) the menu.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandContextMenu.UpdatePosition(System.Drawing.Point)">
            <summary>
            Requests a repositioning of the menu.
            </summary>
            <param name="newPos">New position of the menu.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandContextMenu.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal.
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandContextMenu.Dispose">
            <summary>
            Called when the menu must be disposed.
            NEVER call this function manually if you've set the command bar item collection
            such that it's no longer owned by this menu.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandContextMenu.MenuQuit">
            <summary>
            Raised when the menu has been dismissed.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandContextMenu.Expanded">
            <summary>
            Raised when a collapsed personalized menu is expanded.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandContextMenu.Shown">
            <summary>
            Raised after the menu has been shown.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.CommandContextMenu.Disposed">
            <summary>
            Occurs when the object has been disposed.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.Site">
            <summary>
            The container of this component.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.SelectedMenuItem">
            <summary>
            The initially selected menu item, set before the menu is shown.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.Items">
            <summary>
            A collection of CommandBarItem objects that defines the items in the menu.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.Parent">
            <summary>
            The parent context menu of this menu (if this is a submenu).
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.SourceControl">
            <summary>
            The control responsible for handling messages.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.Renderer">
            <summary>
            The renderer that defines the look and feel of the menu.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.Animate">
            <summary>
            Specifies whether or not to animate the menu when shown.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.ShowInfrequent">
            <summary>
            Specifies whether or not to show the personalized menu initially expanded.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.SuppressClickEvents">
            <summary>
            Specifies whether or not to raise the Click event for the selected menu item.
            If you set this to True, no Click events will be generated for menu items.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.ReturnCommand">
            <summary>
            Gets the item that was clicked by the user when the menu was closed.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.EatFinalClick">
            <summary>
            Should the final click message (WM_LBUTTONDOWN) be eaten?
            Set this to True for left-button handled context menus.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.IsPersonalized">
            <summary>
            Indicates whether or not the menu has infrequent items.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandContextMenu.Handle">
            <summary>
            Gets the handle of this menu window.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ExpandedEventHandler">
            <summary>
            Defines the signature for the expanded event.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ExpandedEventArgs">
            <summary>
            Event arguments for the Expanded event.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ExpandedEventArgs.#ctor">
            <summary>
            Constructs a new object.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ExpandedEventArgs.DoNotUpdate">
            <summary>
            Instructs the menu NOT to update its position and size as a result of the expansion.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandContextMenuDesigner">
            <summary>
            Summary description for CommandContextMenuDesigner.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.FloatingForm">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.FloatingForm.BorderWidth">
            <summary>
            Gets the total border width (left and right) of a floating form.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.FloatingForm.BorderHeight">
            <summary>
            Gets the total border height (top, bottom, and caption bar) of a floating form.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.FloatingForm.CaptionHeight">
            <summary>
            Gets the height of a floating form's caption.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.FloatingForm.BorderSize">
            <summary>
            Gets the typical border thickness of a floating form.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.FloatingForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Internal
            </summary>
            <param name="m"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.#ctor">
            <summary>
            Constructs a new FloatingForm.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.OnHandleCreated(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.OnMouseLeave(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.OnActivated(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.OnDeactivate(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Internal.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.FloatingForm.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Internal
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="P:NETXP.Controls.Bars.FloatingForm.Text">
            <summary>
            Internal
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.FloatingForm.CreateParams">
            <summary>
            Internal
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ICommandBarRenderer">
            <summary>
            Defines a renderer for command bars.
            This allows full control over how the command bar is drawn.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawContainerBackground(NETXP.Controls.Bars.CommandBarDock,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the background of the command bar dock.
            </summary>
            <param name="dock">The dock.</param>
            <param name="g">The graphics object.</param>
            <param name="clip">The clipping rectangle.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawFloatingWindowBackground(NETXP.Controls.Bars.FloatingForm,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics)">
            <summary>
            Draws the background of a floating form.
            </summary>
            <param name="form">The floating form.</param>
            <param name="bar">The command bar inside the form.</param>
            <param name="g">The graphics object.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawFloatingWindowButton(NETXP.Controls.Bars.FloatingForm,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.DrawItemState)">
            <summary>
            Draws the close button for a floating form.
            </summary>
            <param name="form">The floating form.</param>
            <param name="bar">The command bar inside the form.</param>
            <param name="g">The graphics object.</param>
            <param name="rect">The button's bounds rectangle.</param>
            <param name="state">The button's state.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawCommandBarBackground(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws the command bar background.
            </summary>
            <param name="bar">The command bar.</param>
            <param name="g">The graphics object.</param>
            <param name="rect">The command bar bounds.</param>
            <param name="vertical">Is the bar vertical?</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawGripper(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws the gripper for a command bar.
            </summary>
            <param name="bar">The command bar.</param>
            <param name="g">The graphics object.</param>
            <param name="gripRect">The gripper bounds.</param>
            <param name="vertical">Is the bar vertical?</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawButtonItem(NETXP.Controls.Bars.CommandBarButtonItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws a button item.
            </summary>
            <param name="item">The item.</param>
            <param name="bar">The command bar.</param>
            <param name="g">The graphics object.</param>
            <param name="state">The item's state.</param>
            <param name="rect">The item's bounds.</param>
            <param name="dropDown">Is the item dropped down?</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawSeparatorItem(NETXP.Controls.Bars.CommandBarSeparatorItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a separator item.
            </summary>
            <param name="item">The item.</param>
            <param name="bar">The command bar.</param>
            <param name="g">The graphics object.</param>
            <param name="rect">The item's bounds.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawExpansionItem(NETXP.Controls.Bars.CommandBarExpansionItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws an expansion item.
            </summary>
            <param name="item">The item.</param>
            <param name="bar">The command bar.</param>
            <param name="g">The graphics object.</param>
            <param name="state">The item's state.</param>
            <param name="rect">The item's bounds.</param>
            <param name="dropDown">Is the item dropped down?</param>
            <param name="chevron">Show a chevron?</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawLabelItem(NETXP.Controls.Bars.CommandBarLabelItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a label item.
            </summary>
            <param name="item">The item.</param>
            <param name="bar">The command bar.</param>
            <param name="g">The graphics object.</param>
            <param name="rect">The item's bounds.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawComboBox(System.Windows.Forms.ComboBox,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean,NETXP.Controls.Bars.DrawStyle)">
            <summary>
            Draws a flat combo box.
            </summary>
            <param name="box">The combo box.</param>
            <param name="g">The graphics object.</param>
            <param name="rect">The item's bounds.</param>
            <param name="enabled">Is the combo box enabled?</param>
            <param name="rightToLeft">Is the combo box right-to-left?</param>
            <param name="drawStyle">The combo box state.</param>
            <returns>True if custom drawn.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawMenuBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Int32)">
            <summary>
            Draws the background of a popup menu.
            </summary>
            <param name="g">The graphics object.</param>
            <param name="rect">The menu's bounds.</param>
            <param name="menuGapLocation">The location of the menu gap (for menus shown by command bar items).</param>
            <param name="menuGapSize">The horizontal size of the menu gap.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawMenuButtonItem(NETXP.Controls.Bars.CommandBarButtonItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            Draws a button item on a popup menu.
            </summary>
            <param name="item">The item.</param>
            <param name="menu">The menu.</param>
            <param name="g">The graphics object.</param>
            <param name="state">The item's state.</param>
            <param name="rect">The item's bounds.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawMenuSeparatorItem(NETXP.Controls.Bars.CommandBarSeparatorItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a separator item on a popup menu.
            </summary>
            <param name="item">The item.</param>
            <param name="menu">The menu.</param>
            <param name="g">The graphics object.</param>
            <param name="rect">The item's bounds.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawMenuExpansionItem(NETXP.Controls.Bars.CommandBarExpansionItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            Draws an expansion (chevron) item on a personalized menu.
            </summary>
            <param name="item">The item.</param>
            <param name="menu">The menu.</param>
            <param name="g">The graphics object.</param>
            <param name="state">The item's state.</param>
            <param name="rect">The item's bounds.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawMenuLabelItem(NETXP.Controls.Bars.CommandBarLabelItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a label on a popup menu.
            </summary>
            <param name="item">The item.</param>
            <param name="menu">The menu.</param>
            <param name="g">The graphics object.</param>
            <param name="rect">The item's bounds.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawMenuScrollArrow(System.Drawing.Rectangle,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Draws a scroll bar arrow on a scrollable popup menu.
            </summary>
            <param name="bounds">The arrow's bounds.</param>
            <param name="g">The graphics object.</param>
            <param name="up">Is this an up arrow?</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawMenuShadowHorizontal(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Int32)">
            <summary>
            Draws a horizontal popup menu shadow.
            </summary>
            <param name="g">The graphics object.</param>
            <param name="rect">The shadow's bounding rectangle.</param>
            <param name="menuGapLocation">The location of the menu gap (for menus shown by command bar items).</param>
            <param name="menuGapSize">The horizontal size of the menu gap.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.DrawMenuShadowVertical(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a vertical popup menu shadow.
            </summary>
            <param name="g">The graphics object.</param>
            <param name="rect">The shadow's bounding rectangle.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ICommandBarRenderer.UpdateColorTable">
            <summary>
            Called at the beginning of every draw operation to ensure that the color tables are
            up to date.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.IListBarRenderer">
            <summary>
            Defines a renderer for list bars.
            This allows full control over how list bars are drawn.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.IListBarRenderer.DrawBar(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarGroup,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a list bar group's background and contents (items).
            </summary>
            <param name="bar">The list bar.</param>
            <param name="group">The list bar group.</param>
            <param name="g">The graphics object.</param>
            <param name="bounds">The group's bounding rectangle.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.IListBarRenderer.DrawButton(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarGroup,System.Drawing.Graphics)">
            <summary>
            Draws a list bar group's button.
            </summary>
            <param name="bar">The list bar.</param>
            <param name="group">The list bar group.</param>
            <param name="g">The graphics object.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.IListBarRenderer.DrawControlBorder(NETXP.Controls.Bars.ListBar,System.Drawing.Graphics)">
            <summary>
            Draws the border of a list bar.
            </summary>
            <param name="bar">The list bar.</param>
            <param name="g">The graphics object.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.IListBarRenderer.DrawBackground(NETXP.Controls.Bars.ListBar,System.Drawing.Graphics)">
            <summary>
            Draws a list bar's background.
            </summary>
            <param name="bar">The list bar.</param>
            <param name="g">The graphics object.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.IListBarRenderer.DrawInsertPoint(NETXP.Controls.Bars.ListBar,System.Drawing.Graphics,NETXP.Controls.Bars.ListBarGroup,NETXP.Controls.Bars.ListBarInsertPoint)">
            <summary>
            Draws the insertion point when dragging an item.
            </summary>
            <param name="bar">The list bar.</param>
            <param name="g">The graphics object.</param>
            <param name="group">The current list bar group.</param>
            <param name="dragInsertPoint">The insertion point.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.IListBarRenderer.DrawScrollButton(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarScrollButton,System.Drawing.Graphics)">
            <summary>
            Draws a scroll button.
            </summary>
            <param name="bar">The list bar.</param>
            <param name="sb">The scroll button.</param>
            <param name="g">The graphics object.</param>
        </member>
        <member name="T:NETXP.Controls.Bars.IMouseHandler">
            <summary>
            An internal interface specifying the properties and methods which must
            be supported by an object in the control which handles mouse events.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.IMouseHandler.MouseDownPoint">
            <summary>
            Gets/sets the point at which the mouse button was
            pressed.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.IMouseHandler.ToolTipText">
            <summary>
            Gets/sets the tooltip text for this object.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.IMouseHandler.MouseOver">
            <summary>
            Gets/sets whether the mouse is over the object or not.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.IMouseHandler.MouseDown">
            <summary>
            Gets/sets whether the mouse was pressed on the object or not.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBar">
            <summary>
            The ListBar control is an implementation of the Microsoft outlook bar control.
            This control provides both the functionality of a standard outlook bar control
            as well as the functionality of the VS.NET toolbox control.
            
            The ListBar control supports drag and drop, as well as custom rendering. The bars
            are configured using <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> objects which are
            collected in the <see cref="T:NETXP.Controls.Bars.ListBarGroupCollection"/> object
            accessible through the control's <see cref="P:NETXP.Controls.Bars.ListBar.Groups"/> property.
            Each <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> in turn contains a 
            <see cref="T:NETXP.Controls.Bars.ListBarItemCollection"/> of <see cref="T:NETXP.Controls.Bars.ListBarItem"/> objects 
            which represent the buttons within each group.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ListBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.#ctor">
            <summary>
            Creates a new instance of a ListBar control.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.buttonPressed_Tick(System.Object,System.EventArgs)">
            <summary>
            Controls scrolling when the mouse is over and down on a scroll
            bar button.
            </summary>
            <param name="sender">The object which raised this event.</param>
            <param name="e">Arguments associated with this event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.Scroll(NETXP.Controls.Bars.ListBarScrollButton,System.Boolean)">
            <summary>
            Scroll the control for the selected button.
            </summary>
            <param name="button">Button to scroll for.</param>
            <param name="fromTimer">Whether request to scroll from a 
            scroll button timer event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.Scroll(NETXP.Controls.Bars.ListBarScrollButton)">
            <summary>
            Scroll the control for the selected button.
            </summary>
            <param name="button">Button to scroll for.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.Scroll(System.Int32)">
            <summary>
            Scroll the control in the specified direction.
            </summary>
            <param name="direction">The direction to move in.  Note that this follows
            the direction of movement of an item: +1 scrolls up, -1 scrolls down.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.Scroll(System.Int32,System.Boolean)">
            <summary>
            Scroll the control in the specified direction.
            </summary>
            <param name="direction">The direction to move in.  Note that this follows
            the direction of movement of an item: +1 scrolls up, -1 scrolls down.</param>
            <param name="fromTimer">Whether request to scroll from a 
            scroll button timer event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnResize(System.EventArgs)">
            <summary>
            Raises the Resize event and performs internal
            sizing of the objects in the control.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnSizeChanged(System.EventArgs)">
            <summary>
            Raises the SizeChanged event for this control
            and internally sizes the display.
            </summary>
            <param name="e">Event arguments associated with this
            event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.GetClientRectangleExcludingBorder">
            <summary>
            Called by the control's internal sizing mechanism.
            Returns the client size excluding the border of the
            control.
            </summary>
            <returns>A <c>Rectangle</c> providing the area to 
            draw the control into.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.GetScrollButtonRectangle(NETXP.Controls.Bars.ListBarScrollButton.ListBarScrollButtonType,NETXP.Controls.Bars.ListBarGroup,System.Int32)">
            <summary>
            Called by the control's internal sizing mechanism.
            Returns the rectangle for a scroll button.
            </summary>
            <param name="buttonType">The scroll button to
            get the rectangle for.</param>
            <param name="selectedGroup">The Selected Group in the control.</param>
            <param name="internalGroupHeight">The internal height of the
            selected group</param>
            <returns>The Rectangle for the scroll button.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event and performs internal drawing of the
            control.	
            </summary>
            <param name="e">A PaintEventArgs object with details about the 
            paint event that must be performed.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the double click event and performs internal double-click
            processing for the control.
            </summary>
            <param name="e"><see cref="T:System.EventArgs"/> associated with this
            double-click event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnItemDoubleClicked(NETXP.Controls.Bars.ItemClickedEventArgs)">
            <summary>
            Raises the <see cref="E:NETXP.Controls.Bars.ListBar.ItemDoubleClicked"/> event for an item.
            </summary>
            <param name="e">The <see cref="T:NETXP.Controls.Bars.ItemClickedEventArgs"/> details
            associated with the double click event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event and performs internal mouse-down
            processing for the control.
            </summary>
            <param name="e">A MouseEventArgs object with details about the
            mouse event that has occurred.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event and performs mouse move processing
            for the control.
            </summary>
            <param name="e">A MouseEventArgs object describing the mouse
            move event that has occurred.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event and performs mouse up processing
            for the control.
            </summary>
            <param name="e">A MouseEventArgs object describing the mouse
            move event that has occurred.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the MouseLeave event and performs internal mouse
            track processing for the control.
            </summary>
            <param name="e">Event arguments associated with this event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseWheel event and performs mouse wheel 
            processing for the control.
            </summary>
            <param name="e">A MouseEventArgs object describing the mouse
            move event that has occurred.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnDragOver(System.Windows.Forms.DragEventArgs)">
            <summary>
            Raises the DragOver event and performs internal processing of 
            drag-drop to show the insertion point and navigate through
            the items in the control.
            </summary>
            <param name="e">A DragEventArgs object describing the drag
            over being performed.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnDragDrop(System.Windows.Forms.DragEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnBeforeGroupChanged(NETXP.Controls.Bars.BeforeGroupChangedEventArgs@)">
            <summary>
            Raises the BeforeSelectedGroupChanged event.  This event enables
            the user to prevent a group selection.
            </summary>
            <param name="e">The BeforeGroupChangedEventArgs object associated
            with this event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnBeforeItemClicked(NETXP.Controls.Bars.BeforeItemClickedEventArgs@)">
            <summary>
            Raises the BeforeItemClicked event.  This event enables
            the user to prevent an item from being selected.
            </summary>
            <param name="e">The BeforeItemClickedEventArgs object associated
            with this event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnItemClicked(NETXP.Controls.Bars.ItemClickedEventArgs)">
            <summary>
            Raises the <c>ItemClicked</c> event. 
            </summary>
            <param name="e">The <c>ItemClickedEventArgs</c> object associated 
            with this event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnGroupClicked(NETXP.Controls.Bars.GroupClickedEventArgs)">
            <summary>
            Raises the <c>GroupClicked</c> event.
            </summary>
            <param name="e">The <c>GroupClickedEventArgs</c> object
            associated with this event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnBeforeLabelEdit(NETXP.Controls.Bars.ListBarLabelEditEventArgs)">
            <summary>
            Raises the BeforeLabelEdit event for an item in the control.
            </summary>
            <param name="e">The LabelEditEventArgs describing the item
            that is about to be edited and allowing the edit action
            to be cancelled.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnAfterLabelEdit(NETXP.Controls.Bars.ListBarLabelEditEventArgs)">
            <summary>
            Raises the AfterLabelEdit event for an item in the control.
            </summary>
            <param name="e">The AfterEditEventArgs describing the item
            that has just been edited and allowing the edit action
            to be cancelled or the new caption to be changed.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.OnSelectedGroupChanged(System.EventArgs)">
            <summary>
            Raises the <c>SelectedGroupChanged</c> event.
            </summary>
            <param name="e">An EventArgs object associated with the event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.MouseSelectItem(NETXP.Controls.Bars.ListBarItem,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Selects an item in response to a mouse event.
            </summary>
            <param name="item">Item to be selected.</param>
            <param name="e"><see cref="T:System.Windows.Forms.MouseEventArgs"/> 
            details associated with the mouse event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.SelectItem(NETXP.Controls.Bars.ListBarItem)">
            <summary>
            Selects an item in the selected bar and makes
            it visible.
            </summary>
            <param name="item">The item to select.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.StartGroupEdit(NETXP.Controls.Bars.ListBarGroup)">
            <summary>
            Starts editing the specified ListBarGroup.  Note this
            method is called from the StartEdit method of a ListBarGroup.
            </summary>
            <param name="group">The group to start editing.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.StartItemEdit(NETXP.Controls.Bars.ListBarItem)">
            <summary>
            Starts editing the specified <c>ListBarItem</c>.  Note this
            method is called from the <c>StartEdit</c> method of a 
            <c>ListBarItem</c>.
            <seealso cref="M:NETXP.Controls.Bars.ListBarItem.StartEdit"/>
            </summary>
            <param name="item">The item to start editing.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.EnsureItemVisible(NETXP.Controls.Bars.ListBarItem)">
            <summary>
            Brings the specified <c>ListBarItem</c> into view if it is not already
            visible.  The <c>ListBarItem</c> must be in the selected group.
            <seealso cref="T:NETXP.Controls.Bars.ListBarItem"/>
            <seealso cref="P:NETXP.Controls.Bars.ListBar.SelectedGroup"/>
            </summary>
            <param name="item">Item to bring into view.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.HitTest(System.Drawing.Point)">
            <summary>
            Checks if there is an object which interacts with
            the mouse in the control under the specified point.
            </summary>
            <param name="pt">The point to test.</param>
            <returns>If there is a mouse object under the point 
            then its IMouseHandler interface, otherwise null.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.HitTest(System.Drawing.Point,System.Boolean)">
            <summary>
            Checks if there is an object which interacts with
            the mouse in the control under the specified point.
            </summary>
            <param name="pt">The point to test.</param>
            <returns>If there is a mouse object under the point 
            then its IMouseHandler interface, otherwise null.</returns>
            <param name="forDragDrop">Whether the hit testing is
            being performed for a drag-drop operation or not.  During
            drag-drop, the hittest rectangle is relaxed so it includes
            the entire rectangle and not just the icon and text.
            </param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.GroupChanged(NETXP.Controls.Bars.ListBarGroup,System.Boolean)">
            <summary>
            Internal notification from a ListBarGroup that it has 
            been changed.
            </summary>
            <param name="group">The ListBarGroup which has been
            changed, or null the group has been removed.</param>
            <param name="addRemove">Whether the effect of the
            change will require the control to re-measured.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.ItemChanged(NETXP.Controls.Bars.ListBarItem,System.Boolean)">
            <summary>
            Internal notification from a ListBarItem that it has been
            changed.
            </summary>
            <param name="item">The ListBarItem which has been changed, 
            or null if the item has been removed.</param>
            <param name="addRemove">Whether the effect of the control
            will require the bar's contents to be remeasured.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.PostResizeBarChanged">
            <summary>
            Ensures the scroll bar isn't irrelevantly 
            begin displayed.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.GetGroupButtonWidth(NETXP.Controls.Bars.ListBarGroup)">
            <summary>
            Called by the control's internal sizing mechanism.
            Returns the size of a <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> button
            rectangle.
            </summary>
            <param name="group">The <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> to get the 
            button width for.</param>
            <returns>The width of the button.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.SetGroups(NETXP.Controls.Bars.ListBarGroupCollection)">
            <summary>
            Sets the groups object associated with this control
            to a new group collection.
            </summary>
            <param name="groups">The <see cref="T:NETXP.Controls.Bars.ListBarGroupCollection"/> object holding
            the new collection of groups to associate with this control.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.BeginUpdate">
            <summary>
            Prevents the control from drawing until the 
            <see cref="M:NETXP.Controls.Bars.ListBar.EndUpdate"/> method is called.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.EndUpdate">
            <summary>
            Resumes drawing of the control after drawing was suspended by the 
            <see cref="M:NETXP.Controls.Bars.ListBar.BeginUpdate"/> method.		
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.RenderScrollNewGroup(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the control when a new group is being scrolled
            into view.
            </summary>
            <param name="pe">The arguments associated with the paint
            event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.Render(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Renders the control given the object passed to a Paint event.
            </summary>
            <param name="pe">The arguments associated with the paint
            event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.CreateListBarGroupCollection">
            <summary>
            Creates a new instance of the ListBarGroupCollection used by this
            control to store the ListBarGroups.  Fired during control 
            initialisation.
            </summary>
            <returns>A new instance of the ListBarGroupCollection to be used
            by the control to store ListBarGroups.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.CreateListBarScrollButton(NETXP.Controls.Bars.ListBarScrollButton.ListBarScrollButtonType)">
            <summary>
            Creates a new instance of a ListBarScrollButton used by this control
            to draw the scroll buttons.  Fired during control initialisation
            </summary>
            <param name="buttonType">The type of scroll button (Up or Down)
            to create</param>
            <returns>A new ListBarScrollButton which is drawn when a ListBar
            contains more items than can be displayed.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.BeginInit">
            <summary>
            ISupportInitialize method.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBar.EndInit">
            <summary>
            ISupportInitialize method.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.ListBar.BeforeSelectedGroupChanged">
            <summary>
            Raised before the selected group in the ListBar control is changed. Allows
            the group selection to be cancelled.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.ListBar.SelectedGroupChanged">
            <summary>
            Raised when the selected group in a ListBar control has been
            changed.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.ListBar.BeforeItemClicked">
            <summary>
            Raised before an item in a ListBar control is clicked.  Allows
            the item selection to be cancelled.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.ListBar.ItemClicked">
            <summary>
            Raised when an item has been clicked in the ListBar control.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.ListBar.ItemDoubleClicked">
            <summary>
            Raised when an item has been double clicked in the ListBar control.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.ListBar.GroupClicked">
            <summary>
            Raised when a group has been clicked in the ListBar control.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.ListBar.BeforeLabelEdit">
            <summary>
            Raised before an item's label is about to be edited in the ListBar
            control.  Allows the label edit to be cancelled.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.ListBar.AfterLabelEdit">
            <summary>
            Raised after an item's label has been edited in the ListBar control.
            Allows the new caption to be checked and the edit cancelled.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBar.Font">
            <summary>
            Gets/sets the default <see cref="T:System.Drawing.Font"/> used to 
            render text in the control.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBar.SelectOnMouseDown">
            <summary>
            Gets/sets whether items are selected on MouseDown,
            rather than on MouseUp, which is the default.	
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBar.AllowDragItems">
            <summary>
            Gets/sets whether items will be dragged 
            in the control automatically.  The default
            is <c>True</c>.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBar.AllowDragGroups">
            <summary>
            Gets/sets whether groups will be dragged 
            in the control automatically.  The default
            is <c>True</c>. (Note in MS Outlook
            Groups cannot be reordered by dragging, but
            they can in VS.NET).
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBar.EditItem">
            <summary>
            Gets the item which is currently being edited, if any,
            otherwise returns null.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBar.Renderer">
            <summary>
            Gets or sets the renderer associated with this list bar.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBar.Groups">
            <summary>
            Gets the collection of groups in the ListBar.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBar.ToolTip">
            <summary>
            Gets/sets the tooltip object associated with this control.
            The control does not generate its own internal Tooltips
            and instead relies on an external ToolTip object to
            display tooltips.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBar.SelectedGroup">
            <summary>
            Returns the currently selected group in the ListBar control,
            if any.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarGroupView">
            <summary>
            Specifies the view to use for the items within
            a <see cref="T:NETXP.Controls.Bars.ListBarGroup"/>.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ListBarGroupView.TextUnderneath">
            <summary>
            The ListBar will display using large icons, with the text underneath.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ListBarGroupView.TextRight">
            <summary>
            The ListBar will display using small icons, with text to the right.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ListBarGroupView.NoText">
            <summary>
            The ListBar will display using small or large icons, with no text.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarLabelEditEventArgs">
            <summary>
            Provides details about an item which will undergo
            an edit operation.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarLabelEditEventArgs.#ctor(System.Int32,System.String,System.Object)">
            <summary>
            Constructs a new instance of this object
            given the item, label and object.
            </summary>
            <param name="item">The index of the item being edited.</param>
            <param name="label">The label of the item being edited.</param>
            <param name="labelEditObject">The object being edited.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarLabelEditEventArgs.LabelEditObject">
            <summary>
            Returns the object for which label editing has
            been requested.  Can either be a <see cref="T:NETXP.Controls.Bars.ListBarItem"/> or
            a <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> (or a subclass of either).
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.BeforeGroupChangedEventArgs">
            <summary>
            Provides event arguments for the BeforeSelectedGroupChanged event
            raised by the control.  This object contains the group that
            would be selected and provides the opportunity to cancel the 
            group selection.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.BeforeGroupChangedEventArgs.group">
            <summary>
            The ListBarGroup that would be selected.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.BeforeGroupChangedEventArgs.cancel">
            <summary>
            Whether to cancel the operation or not.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.BeforeGroupChangedEventArgs.#ctor(NETXP.Controls.Bars.ListBarGroup)">
            <summary>
            Constructs a new instance of this object.
            Called
            by the <see cref="T:NETXP.Controls.Bars.ListBar"/> control before firing a 
            <c>BeforeSelectedGroupChanged</c> event.
            </summary>
            <param name="group">The group that will be selected</param>
        </member>
        <member name="P:NETXP.Controls.Bars.BeforeGroupChangedEventArgs.Group">
            <summary>
            Gets the group that will be selected.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.BeforeGroupChangedEventArgs.Cancel">
            <summary>
            Gets/sets whether the group selection should be cancelled
            or not. By default the group selection is not cancelled.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.BeforeItemClickedEventArgs">
            <summary>
            This class is used with the BeforeItemClicked event and provides
            the item which is about to be clicked and the option to prevent
            the item being clicked by setting the Cancel property.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.BeforeItemClickedEventArgs.item">
            <summary>
            The ListBarItem which is about to be clicked.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.BeforeItemClickedEventArgs.cancel">
            <summary>
            Whether the click should be cancelled or not.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.BeforeItemClickedEventArgs.#ctor(NETXP.Controls.Bars.ListBarItem)">
            <summary>
            Constructor for this object. Called
            by the <see cref="T:NETXP.Controls.Bars.ListBar"/> control before firing a 
            <see cref="T:NETXP.Controls.Bars.BeforeItemClickedEventHandler"/> event.
            </summary>
            <param name="item">The item that's about to be clicked.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.BeforeItemClickedEventArgs.Cancel">
            <summary>
            Gets/sets whether the click should be cancelled or not.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.BeforeItemClickedEventArgs.Item">
            <summary>
            Gets the ListBarItem that is about to be clicked.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ItemClickedEventArgs">
            <summary>
            This class is provides details of which item has been clicked
            and the mouse details of the click when the <c>ItemClicked</c> event
            is raised from a <c>ListBar</c>.
            <seealso cref="E:NETXP.Controls.Bars.ListBar.ItemClicked"/>
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ObjectClickedEventArgs">
            <summary>
            An abstract class used as the bases for the <c>ItemClicked</c>
            and <c>GroupClicked</c> events of the <see cref="T:NETXP.Controls.Bars.ListBar"/> control.
            This class stores details of the mouse location and button.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ObjectClickedEventArgs.location">
            <summary>
            The location of the mouse when the item was clicked.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ObjectClickedEventArgs.mouseButton">
            <summary>
            The mouse button that was used.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ObjectClickedEventArgs.#ctor(System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            When used in a subclass, constructs a new instance of the class with the specified
            mouse location and button.
            </summary>
            <param name="location">The location of the mouse.</param>
            <param name="mouseButton">The button which was pressed.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.ObjectClickedEventArgs.Location">
            <summary>
            The Location of the mouse, relative to the control,
            when the item was clicked.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ObjectClickedEventArgs.MouseButton">
            <summary>
            The MouseButton used to click the item.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ItemClickedEventArgs.item">
            <summary>
            The ListBarIem that has been clicked.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ItemClickedEventArgs.#ctor(NETXP.Controls.Bars.ListBarItem,System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Constructs a new instance of this object.  Called by the <see cref="T:NETXP.Controls.Bars.ListBar"/>
            control when firing an <c>ItemClicked</c> event.
            </summary>
            <param name="item">The item that has been clicked</param>
            <param name="location">The mouse location relative to the 
            control for the click.</param>
            <param name="mouseButton">The mouse button used to click
            the item.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.ItemClickedEventArgs.Item">
            <summary>
            Gets the <see cref="T:NETXP.Controls.Bars.ListBarItem"/> that has been clicked.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.GroupClickedEventArgs">
            <summary>
            This class is provides details of which item has been clicked
            and the mouse details of the click when the <c>GroupClicked</c> event
            is raised from a <see cref="T:NETXP.Controls.Bars.ListBar"/> control.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.GroupClickedEventArgs.group">
            <summary>
            The ListBarGroup that has been clicked.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.GroupClickedEventArgs.#ctor(NETXP.Controls.Bars.ListBarGroup,System.Drawing.Point,System.Windows.Forms.MouseButtons)">
            <summary>
            Constructs a new instance of this object.  Called by the <see cref="T:NETXP.Controls.Bars.ListBar"/>
            control when firing a <c>GroupClicked</c> event.
            </summary>
            <param name="group">The <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> that has been clicked</param>
            <param name="location">The mouse location relative to the 
            control for the click.</param>
            <param name="mouseButton">The mouse button used to click
            the item.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.GroupClickedEventArgs.Group">
            <summary>
            Gets the <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> that has been clicked.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.BeforeGroupChangedEventHandler">
            <summary>
            Represents the method that handles the BeforeSelectedGroupChanged event
            of a ListBar control.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.BeforeItemClickedEventHandler">
            <summary>
            Represents the method that handles the BeforeItemClicked event
            of a ListBar control.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ItemClickedEventHandler">
            <summary>
            Represents the method that handles the ItemClicked event of a
            ListBar control.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.GroupClickedEventHandler">
            <summary>
            Represents the method that handles the GroupClicked event of a
            ListBar control.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarLabelEditEventHandler">
            <summary>
            Represents the method that handles the BeforeLabelEdit and AfterLabelEdit
            events of a ListBar control.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarInsertPoint">
            <summary>
            An internal class to manage the drag-drop insert point
            within the control.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ListBarInsertPoint.itemBefore">
            <summary>
            The item before the drag-drop insert point, if any
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ListBarInsertPoint.itemAfter">
            <summary>
            The item after the drag-drop insert point, if any 
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ListBarInsertPoint.overEmptyBar">
            <summary>
            If we're over an empty bar.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarInsertPoint.CompareTo(System.Object)">
            <summary>
            Compares this object with another object of the same type.
            This implementation is only really useful for testing equality
            </summary>
            <param name="obj">Another ListBarInsertPoint object</param>
            <returns>A 32-bit signed integer that indicates the relative order of the comparands.  
            The return value has these meanings: 
            &lt; 0: This instance is less than obj.  
            0: This instance is equal to obj.  
            &gt; 0: This instance is greater than obj. </returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarInsertPoint.#ctor(NETXP.Controls.Bars.ListBarItem,NETXP.Controls.Bars.ListBarItem,System.Boolean)">
            <summary>
             Constructs a new instance of this class, setting the items
             before and after the drag-drop insertion point.
            </summary>
            <param name="itemBefore">Item before the drag-drop insertion
            point, or null if no item before.</param>
            <param name="itemAfter">Item after the drag-drop insertion
            point, or null if no item after.</param>
            <param name="overEmptyBar">Whether the drag-drop insertion
            point should be displayed in an empty bar.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarInsertPoint.ItemBefore">
            <summary>
            Returns the item before the drag-drop point, if any.  At least one
            of the properties ItemBefore or ItemAfter will return an item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarInsertPoint.ItemAfter">
            <summary>
            Returns the item after the drag-drop point, if any.  At least one
            of the properties ItemBefore or ItemAfter will return an item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarInsertPoint.OverEmptyBar">
            <summary>
            Returns whether the drag point is over an empty bar
            or not.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarGroup">
            <summary>
            A <c>ListBarGroup</c> is a bar within a <see cref="T:NETXP.Controls.Bars.ListBar"/> control.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroup.Dispose(System.Boolean)">
            <summary>
            Internal
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroup.CreateListBarItemCollection">
            <summary>
            Called to create a new item collection for this ListBarGroup.
            </summary>
            <returns>The ListBarItemCollection that will be used for this
            ListBarGroup</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroup.SetButtonHeight(System.Drawing.Font)">
            <summary>
            Called to set the height of this group's button by the owning control.
            </summary>
            <param name="defaultFont">The default <see cref="T:System.Drawing.Font"/>
            to use when this item does not have a specific font set.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroup.SetLocationAndWidth(System.Drawing.Point,System.Int32)">
            <summary>
            Sets the location and width of the button which
            activates this <see cref="T:NETXP.Controls.Bars.ListBarGroup"/>.  This method
            is called by internally by the <see cref="T:NETXP.Controls.Bars.ListBar"/> 
            which owns this item.
            </summary>
            <remarks>
            This member is not intended to be called from client code.
            If you do use it, it is likely that a subsequent operation
            on the control or group will replace the values.  If you
            need more control over placement, override this class
            and build the logic into the override for this method
            instead.
            </remarks>
            <param name="location">The new location for the item.</param>
            <param name="width">The new width of the item.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroup.StartEdit">
            <summary>
            Starts editing this item.  The <c>BeforeLabelEdit</c> event will
            be fired prior to the text box being made visible.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the item is not
            part of a ListBar control.</exception>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroup.NotifyOwner(System.Boolean)">
            <summary>
            Notifies the owning ListBar control of any changes to a group.
            </summary>
            <param name="addRemove">Whether the control should resize
            all groups associated with the ListBar.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroup.SetOwner(NETXP.Controls.Bars.ListBar)">
            <summary>
            Sets the owning control for this Group.  Called automatically
            whenever a group is added to the group collection associated with
            a ListBar control.
            </summary>
            <param name="owner">The ListBar control which owns this group.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroup.#ctor">
            <summary>
            Constructs a new, blank instance of a ListBarGroup.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroup.#ctor(System.String)">
            <summary>
            Constructs a new instance of a ListBarGroup with the specified
            caption.
            </summary>
            <param name="caption">Caption for the group's control button.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroup.#ctor(System.String,NETXP.Controls.Bars.ListBarItem[])">
            <summary>
            Constructs a new instance of a ListBarGroup with the specified
            caption and items.
            </summary>
            <param name="caption">Caption for the group's control button.</param>
            <param name="subItems">The array of items to add to the group's
            collection of items.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroup.#ctor(System.String,System.String)">
            <summary>
            Constructs a new instance of a ListBarGroup with the specified
            caption and tooltip text.
            </summary>
            <param name="caption">Caption for the group's control button.</param>
            <param name="toolTipText">ToolTip text to show when hovering over
            the group.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroup.#ctor(System.String,System.String,System.Object)">
            <summary>
            Constructs a new instance of a ListBarGroup with the specified
            caption, tooltip text and user-defined data.
            </summary>
            <param name="caption">Caption for the group's control button.</param>
            <param name="toolTipText">ToolTip text to show when hovering over
            the group.</param>
            <param name="tag">User-defined object data which is associated with
            the group.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.SelectedItem">
            <summary>
            Returns the selected <see cref="T:NETXP.Controls.Bars.ListBarItem"/> in this Group, if any, otherwise null.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.MouseDownPoint">
            <summary>
            Gets/sets the point at which the mouse was clicked on the group
            button.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.MouseOver">
            <summary>
            Gets/sets whether the mouse is over the group button.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.MouseDown">
            <summary>
            Gets/sets whether the mouse is down over the group button.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.ScrollOffset">
            <summary>
            Internal member holding the negative scrolled 
            offset of this bar from the top of the client area
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.View">
            <summary>
            Gets/sets the which view to show the items within this bar.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.ButtonLocation">
            <summary>
            Returns the location of the button
            which activates this group relative
            to the owning control.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.ButtonWidth">
            <summary>
            Returns the width of the button
            which activates this group.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.ButtonHeight">
            <summary>
            Returns the height of the button
            which activates this group.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.Items">
            <summary>
            Returns the collection of items belonging to this <see cref="T:NETXP.Controls.Bars.ListBarGroup"/>.
            group.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.Visible">
            <summary>
            Gets/sets whether this group is visible in the control 
            or not.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.Caption">
            <summary>
            Gets/sets the caption displayed for this group.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.Key">
            <summary>
            Gets/sets the string key associated with this group.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.ToolTipText">
            <summary>
            Gets/sets the tooltip that will be displayed when the user
            hovers over this group's button.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.Selected">
            <summary>
            Gets/sets whether this group is selected or not.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.Tag">
            <summary>
            Gets/sets a user-defined object associated with this group.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroup.Owner">
            <summary>
            Gets the owning ListBar control for this item.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarGroupCollection">
            <summary>
            A class to hold the collection of groups in the ListBar control.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ListBarGroupCollection.owner">
            <summary>
            The ListBar which owns this collection
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.Add(NETXP.Controls.Bars.ListBarGroup)">
            <summary>
            Adds a new <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> to the control.
            </summary>
            <param name="group">The group to add to the control</param>
            <returns>The index at which the group was added.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.AddRange(NETXP.Controls.Bars.ListBarGroup[])">
            <summary>
            Adds a range of previously defined <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> objects.
            </summary>
            <param name="values">The array of ListBarGroups to add
            to the control.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.Contains(NETXP.Controls.Bars.ListBarGroup)">
            <summary>
            Determines whether a <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> element is contained within 
            the control's collection of groups.
            </summary>
            <param name="group">The ListBarGroup to check if present.</param>
            <returns>True if the ListBarGroup is contained within the control's
            collection, False otherwise.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.IndexOf(NETXP.Controls.Bars.ListBarGroup)">
            <summary>
            Gets the 0-based index of the specified <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> within this
            collection.
            </summary>
            <param name="group">The group to find the index for.</param>
            <returns>The 0-based index of the group, if found, otherwise - 1.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.Insert(System.Int32,NETXP.Controls.Bars.ListBarGroup)">
            <summary>
            Inserts a group at the specified 0-based index in the collection
            of groups.
            </summary>
            <param name="index">The 0-based index to insert the group at.</param>
            <param name="group">The ListBarGroup to add.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.InsertBefore(NETXP.Controls.Bars.ListBarGroup,NETXP.Controls.Bars.ListBarGroup)">
            <summary>
            Inserts a group immediately before the specified <see cref="T:NETXP.Controls.Bars.ListBarGroup"/>.
            </summary>
            <param name="groupBefore">ListBarGroup to insert before.</param>
            <param name="group">Group to insert.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.InsertAfter(NETXP.Controls.Bars.ListBarGroup,NETXP.Controls.Bars.ListBarGroup)">
            <summary>
            Inserts a <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> immediately after the specified ListBarGroup.
            </summary>
            <param name="groupAfter">ListBarGroup to insert after.</param>
            <param name="group">Group to insert.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.Remove(NETXP.Controls.Bars.ListBarGroup)">
            <summary>
            Removes the specified <see cref="T:NETXP.Controls.Bars.ListBarGroup"/>.
            </summary>
            <param name="group">The group to remove.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.NotifyOwner(NETXP.Controls.Bars.ListBarGroup,System.Boolean)">
            <summary>
            Notifies the owning ListBar control of any changes to a group.
            </summary>
            <param name="group">The Group which has changed.</param>
            <param name="addRemove">Whether the control should resize
            all groups associated with the ListBar.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.OnClearComplete">
            <summary>
            Notifies the control after clearing all groups.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Notifies the control after inserting a new ListBarGroup.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Notifies the control after removing a new ListBarGroup.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Notifies the control after setting a ListBarGroup to another ListBarGroup.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.SetOwner(NETXP.Controls.Bars.ListBar)">
            <summary>
            Enables a deserialized object graph to be associated with a ListBar
            control.
            </summary>
            <param name="owner">The ListBar control which will own
            this collection of items.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarGroupCollection.#ctor(NETXP.Controls.Bars.ListBar)">
            <summary>
            Creates a new instance of the ListBarGroup collection and associates
            it with the control which owns it.
            </summary>
            <param name="owner">The owning ListBar control.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroupCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> at the specified 0-based index.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarGroupCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> with the specified string key.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarItem">
            <summary>
            A class containing the information describing an Item in the ListBar
            control.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItem.SetLocationAndWidth(System.Drawing.Point,System.Int32)">
            <summary>
            Sets the location and width of this item.  This method
            is called by internally by the <see cref="T:NETXP.Controls.Bars.ListBar"/> or
            the <see cref="T:NETXP.Controls.Bars.ListBarGroup"/> which owns this item.
            </summary>
            <remarks>
            This member is not intended to be called from client code.
            If you do use it, it is likely that a subsequent operation
            on the control or group will replace the values.  If you
            need more control over placement, override this class
            and build the logic into the override for this method
            instead.
            </remarks>
            <param name="location">The new location for the item.</param>
            <param name="width">The new width of the item.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItem.SetSize(NETXP.Controls.Bars.ListBarGroupView,System.Drawing.Font,System.Drawing.Size)">
            <summary>
            Called to set the height of the item by the owning control.
            </summary>
            <param name="view">The <see cref="T:NETXP.Controls.Bars.ListBarGroupView"/> in which this
            item is being shown.</param>
            <param name="defaultFont">The default <see cref="T:System.Drawing.Font"/>
            to use when this item does not have a specific font set.</param>
            <param name="imageSize">The size of the image for this item.</param>		
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItem.CompareTo(System.Object)">
            <summary>
            Compares this object with another object of the same type.
            The implementation compares the captions of the items to
            allow items to be sorted alphabetically.
            </summary>
            <param name="obj">Another ListBarItem object</param>
            <returns>A 32-bit signed integer that indicates the relative order of the comparands.  
            The return value has these meanings: 
            &lt; 0: This instance is less than obj.  
            0: This instance is equal to obj.  
            &gt; 0: This instance is greater than obj. </returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItem.EnsureVisible">
            <summary>
            Ensures that this item can be seen in the owner
            control.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the item is not
            part of a ListBarGroup.</exception>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItem.StartEdit">
            <summary>
            Starts editing this item.  The <c>BeforeLabelEdit</c> event will
            be fired prior to the text box being made visible.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the item is not
            part of a ListBarGroup or not part of the selected group
            in the control.</exception>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItem.NotifyOwner(System.Boolean)">
            <summary>
            Notifies the owning control of a change in this item.
            </summary>
            <param name="addRemove">Set to true if the change
            that has been made requires the size of the display
            to be recalculated.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItem.SetOwner(NETXP.Controls.Bars.ListBar)">
            <summary>
            Sets the owning ListBar control for this item.
            </summary>
            <param name="owner">The owning ListBar control for this item.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItem.#ctor">
            <summary>
            Constructs a new, empty instance of a ListBarItem.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItem.#ctor(System.String)">
            <summary>
             Constructs a new instance of a ListBarItem, specifying
             the caption to display.
            </summary>
            <param name="caption">The caption for this item.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.MouseDownPoint">
            <summary>
            Gets/sets the point at which the mouse was pressed
            on this object.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.MouseOver">
            <summary>
            Gets/sets whether the mouse is over this item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.MouseDown">
            <summary>
            Gets/sets whether the mouse is down on this item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.Enabled">
            <summary>
            Gets/sets whether this item is enabled.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.Location">
            <summary>
            Gets the location for this item in the control.
            </summary>
            <remarks>
            The location is relative to the group the 
            item belongs to.  Therefore to find the position
            relative to the control you need to add the 
            bottom position of the button rectangle for the group
            and the scroll offset of the item. 
            </remarks>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.Height">
            <summary>
            Gets the height of this item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.Width">
            <summary>
            Gets the width of this item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.IconRectangle">
            <summary>
            Gets or sets the bounds of the image.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.TextRectangle">
            <summary>
            Gets or sets the bounds of the text.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.Rectangle">
            <summary>
            Gets or sets the bounds of the item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.Selected">
            <summary>
            Gets/sets whether this item is "selected" or not.
            Only one item in the ListBar control can be selected
            at a time.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.Key">
            <summary>
            Gets/sets a user-defined string value which can be used
            to look up the item in the collection which owns it.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.ToolTipText">
            <summary>
            Gets/sets the tooltip text that will be displayed when
            the user hovers over this item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.Caption">
            <summary>
            Gets/sets the caption displayed for this item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.Image">
            <summary>
            Gets or sets the image associated with this item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.Tag">
            <summary>
            Gets/sets an object which can be used to associate
            user-defined data with this item.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItem.Owner">
            <summary>
            Gets the owning ListBar control for this item.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarItemCollection">
            <summary>
            This class manages a collection of items within a ListBarGroup.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ListBarItemCollection.owner">
            <summary>
            The owning ListBar control.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the items in this collection using the specified
            comparer.
            </summary>
            <param name="comparer">IComparer implementation specifying
            how to sort the objects.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.Sort">
            <summary>
            Sorts the items in this collection using the default comparison
            operation (alphabetic).
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.Add(NETXP.Controls.Bars.ListBarItem)">
            <summary>
            Adds a <see cref="T:NETXP.Controls.Bars.ListBarItem"/> object to the group.
            </summary>
            <param name="item">The ListBarItem to add.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.AddRange(NETXP.Controls.Bars.ListBarItem[])">
            <summary>
            Adds a range of <see cref="T:NETXP.Controls.Bars.ListBarItem"/> objects to the bar from an array.
            </summary>
            <param name="values">The array of ListBarItem objects to
            add.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.Contains(NETXP.Controls.Bars.ListBarItem)">
            <summary>
            Returns <c>true</c> if the specified <see cref="T:NETXP.Controls.Bars.ListBarItem"/> is contained
            within this collection, otherwise <c>false</c>.
            </summary>
            <param name="item">The ListBarItem to check.</param>
            <returns>True if the specified ListBarItem is contained
            within this collection, False otherwise.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.IndexOf(NETXP.Controls.Bars.ListBarItem)">
            <summary>
            Returns the 0-based index of the specified item in the
            collection if present, -1 otherwise.
            </summary>
            <param name="item">The ListBarItem to check.</param>
            <returns>The 0-based index of the specified item in the
            collection if present, -1 otherwise.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.Insert(System.Int32,NETXP.Controls.Bars.ListBarItem)">
            <summary>
            Inserts a <see cref="T:NETXP.Controls.Bars.ListBarItem"/> at the specified index in the bar.
            </summary>
            <param name="index">The index to insert at.</param>
            <param name="item">The ListBarItem to insert.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.InsertBefore(NETXP.Controls.Bars.ListBarItem,NETXP.Controls.Bars.ListBarItem)">
            <summary>
            Inserts a <see cref="T:NETXP.Controls.Bars.ListBarItem"/> immediately before the specified ListBarItem.
            </summary>
            <param name="itemBefore">ListBarItem to insert before.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.InsertAfter(NETXP.Controls.Bars.ListBarItem,NETXP.Controls.Bars.ListBarItem)">
            <summary>
            Inserts a <see cref="T:NETXP.Controls.Bars.ListBarItem"/> immediately after the specified ListBarItem.
            </summary>
            <param name="itemAfter">ListBarItem to insert after.</param>
            <param name="item">Item to insert.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.Remove(NETXP.Controls.Bars.ListBarItem)">
            <summary>
            Removes the specified <see cref="T:NETXP.Controls.Bars.ListBarItem"/> from the collection.
            </summary>
            <param name="item">Item to remove.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.OnClearComplete">
            <summary>
            Notifies the owner control that the items have been
            cleared.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Notifies the owner control after an item has been inserted.
            </summary>
            <param name="index">Index of inserting item</param>
            <param name="value">Item which has been inserted.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Notifies the owner control after an item has been removed.
            </summary>
            <param name="index">Index of inserting item</param>
            <param name="value">Item which has been inserted.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Notifies the owner control after an item has been changed using set.
            </summary>
            <param name="index">Index of inserting item</param>
            <param name="oldValue">Old item which was there.</param>
            <param name="newValue">New Item which has been set.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.NotifyOwner(NETXP.Controls.Bars.ListBarItem,System.Boolean)">
            <summary>
            Notifies the owning control of a change in this item.
            </summary>
            <param name="addRemove">Set to true if the change
            that has been made requires the size of the display
            to be recalculated.</param>
            <param name="item">The Item which has been changed
            (or null if the item itm is invalid)</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.SetOwner(NETXP.Controls.Bars.ListBar)">
            <summary>
            Enables a deserialized object graph to be associated with a ListBar
            control.
            </summary>
            <param name="owner">The ListBar control which will own
            this collection of items.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Not implemented.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarItemCollection.#ctor(NETXP.Controls.Bars.ListBar)">
            <summary>
            Constructs a new instance of this collection and sets
            the owner.  Typically this is performed by the owning ListBar
            control.
            </summary>
            <param name="owner">The ListBar which owns this collection</param>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItemCollection.Height">
            <summary>
            Gets the height of all the items within this collection.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItemCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:NETXP.Controls.Bars.ListBarItem"/> at the specified 0-based index.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarItemCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:NETXP.Controls.Bars.ListBarItem"/> with the specified key.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarScrollButton">
            <summary>
            A class which manages the behaviour and data associated with
            a scrolling button in the ListBar control.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarScrollButton.HitTest(System.Drawing.Point)">
            <summary>
            Determines whether the specified point is within the control.
            </summary>
            <param name="pt">The point to test.</param>
            <returns>True if the point is over the button and the button
            is visible, false otherwise.</returns>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarScrollButton.SetRectangle(System.Drawing.Rectangle)">
            <summary>
            Sets the bounding rectangle for this button.
            </summary>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarScrollButton.#ctor(NETXP.Controls.Bars.ListBarScrollButton.ListBarScrollButtonType)">
            <summary>
            Creates a new instance of this class with the specified
            button type (Up or Down)
            </summary>
            <param name="buttonType">The scroll button type to create.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarScrollButton.ToolTipText">
            <summary>
            Gets/sets the tooltip text to display for this button.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarScrollButton.Visible">
            <summary>
            Gets/sets whether this object is visible or not.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarScrollButton.ButtonType">
            <summary>
            Gets which type of scroll button this is (Up or Down)
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarScrollButton.MouseDown">
            <summary>
            Gets/sets whether the mouse is down on this object or not.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarScrollButton.MouseOver">
            <summary>
            Gets/sets whether the mouse is over this object or not.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarScrollButton.MouseDownPoint">
            <summary>
            Gets/sets the point at which the mouse was pressed on
            this object.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarScrollButton.Rectangle">
            <summary>
            Gets the bounding rectangle for this button.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarScrollButton.ListBarScrollButtonType">
            <summary>
            Enumeration of available scroll button types 
            for this control.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ListBarScrollButton.ListBarScrollButtonType.Up">
            <summary>
            The scroll button is an up button.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.ListBarScrollButton.ListBarScrollButtonType.Down">
            <summary>
            The scroll button is a down button.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.PopupCancelEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:NETXP.Controls.Bars.PopupCancelNotifier.PopupCancel"/> event
            raised by this class.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.PopupCancelNotifier.trackHandle">
            <summary>
            Window handle to track for popup cancellation
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.PopupCancelNotifier.disposed">
            <summary>
            Whether this object has been disposed or not
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.PopupCancelNotifier.StartTracking(System.Windows.Forms.Control)">
            <summary>
            Start tracking for a popup cancellation.
            </summary>
            <param name="ctl">The <c>Control</c> or <c>Form</c>
            to use when tracking Window inactivation messages. This can
            either be a control or a Form.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.PopupCancelNotifier.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Check for the WM_ACTIVATE message and stop
            tracking if the window is inactivated.
            </summary>
            <param name="msg">Message details for this window procedure
            event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.PopupCancelNotifier.StopTracking">
            <summary>
            Stop tracking. Called automatically if this class determines
            the popup should be cancelled.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.PopupCancelNotifier.OnPopupCancel(System.EventArgs)">
            <summary>
            Notify when the popup should be cancelled,
            and uninstall tracking.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.PopupCancelNotifier.#ctor">
            <summary>
            Create a new instance of the PopupCancel class
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.PopupCancelNotifier.Finalize">
            <summary>
            Finalises the class and clears up resources if the
            Dispose() method has not been called.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.PopupCancelNotifier.Dispose">
            <summary>
            Ensures any resources associated with this object are
            cleared up.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.HookEventArgs">
            <summary>
            Arguments for the Hook event
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.HookEventArgs.HookCode">
            <summary>
            Hook code
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.HookEventArgs.wParam">
            <summary>
            WPARAM argument
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.HookEventArgs.lParam">
            <summary>
            LPARAM argument
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.HookType">
            <summary>
            Hook Types available under Windows. TODO: documentation
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.LocalWindowsHook">
            <summary>
            This class defines the core functionality to implement
            a Windows Hook.  Specific implementations can subclass this
            class and override <see cref="M:NETXP.Controls.Bars.LocalWindowsHook.OnHookInvoked(NETXP.Controls.Bars.HookEventArgs@)"/>, or respond to the
            <see cref="E:NETXP.Controls.Bars.LocalWindowsHook.HookInvoked"/> event.
            </summary>	
        </member>
        <member name="F:NETXP.Controls.Bars.LocalWindowsHook.HookHandle">
            <summary>
            The handle to the Windows hook.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.LocalWindowsHook.FilterFunc">
            <summary>
            The hook filter function.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.LocalWindowsHook.HookType">
            <summary>
            The type of hook installed.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.LocalWindowsHook.OnHookInvoked(NETXP.Controls.Bars.HookEventArgs@)">
            <summary>
            Raises the HookInvoked event. This method can be overriden
            for particular implementations of a hook, or an implementation
            can respond to the HookInvoked event.
            </summary>
            <param name="e">The HookEventArgs for this hook
            event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.LocalWindowsHook.#ctor(NETXP.Controls.Bars.HookType)">
            <summary>
            Constructs a new instance of this class with
            the specified Hook Type.
            </summary>
            <param name="hookType">Hook type to create</param>
        </member>
        <member name="M:NETXP.Controls.Bars.LocalWindowsHook.CoreHookProc(System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Default filter function.
            </summary>
            <param name="code">Hook code</param>
            <param name="wParam">Hook wParam</param>
            <param name="lParam">Hook lParam</param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.LocalWindowsHook.Install">
            <summary>
            Install the hook.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.LocalWindowsHook.Uninstall">
            <summary>
            Uninstall the hook.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.LocalWindowsHook.Finalize">
            <summary>
            Clear up any resources associated with the hook if 
            Dispose() has not been called.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.LocalWindowsHook.Dispose">
            <summary>
            Clear up any resources associated with this hook.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.LocalWindowsHook.HookInvoked">
            <summary>
            The HookInvoked event is raised whenever the hook fires.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.LocalWindowsHook.HookInvokedEventHandler">
            <summary>
            Represents the method that handles the HookInvoked event
            raised by this class.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.MouseHookEventType">
            <summary>
            Types of MouseHook events which are recorded:
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.MouseHookEventType.MouseMove">
            <summary>
            The mouse has moved
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.MouseHookEventType.MouseDown">
            <summary>
            A mouse button has been depressed
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.MouseHookEventType.MouseUp">
            <summary>
            A mouse button has been released
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.MouseHookEventType.MouseWheel">
            <summary>
            A mouse wheel action has occurred
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.MouseHookEventType.DblClick">
            <summary>
            A mouse button has been double-clicked
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.MouseHookEventLocation">
            <summary>
            The location of the mouse when a mouse hook event is recorded.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.MouseHookEventLocation.Client">
            <summary>
            The mouse event occurred in the client area.
            </summary>
        </member>
        <member name="F:NETXP.Controls.Bars.MouseHookEventLocation.NonClient">
            <summary>
            The mouse event occurred in a non-client area.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.MouseHookEventArgs">
            <summary>
            Information about a Mouse Hook event
            which has occured.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.MouseHookEventArgs.#ctor(System.IntPtr,NETXP.Win32.API.MOUSEHOOKSTRUCT)">
            <summary>
            Constructs a new MouseHookEvent
            </summary>
            <param name="wParam">The <c>wParam</c> (Message code) for the
            Mouse Hook event</param>
            <param name="mhs">The <c>MOUSEHOOKEVENT</c> structure
            for the hook event.</param>
        </member>
        <member name="P:NETXP.Controls.Bars.MouseHookEventArgs.EventType">
            <summary>
            Gets the type of mouse event.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.MouseHookEventArgs.EventLocation">
            <summary>
            Gets the location in which the mouse event
            occurred.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.MouseHookEventArgs.Button">
            <summary>
            Gets the button which is involved in the action
            (or MouseButtons.None if no button is used).
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.MouseHookEventArgs.X">
            <summary>
            Returns the X location of the mouse when the event
            occurred.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.MouseHookEventArgs.Y">
            <summary>
            Returns the Y location of the mouse when the event
            occurred.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.MouseHookEventArgs.Handle">
            <summary>
            Gets the window handle of the object the mouse
            was over.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.MouseHookEventHandler">
            <summary>
            Represents the method that handles the HookInvoked event
            raised by this class.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.MouseHook.OnHookInvoked(NETXP.Controls.Bars.HookEventArgs@)">
            <summary>
            Override for the generic hook's invoked event to
            convert to a strongly typed MouseHookEvent:
            </summary>
            <param name="e">Generic Hook event argument details</param>
        </member>
        <member name="M:NETXP.Controls.Bars.MouseHook.OnMouseHookEvent(NETXP.Controls.Bars.MouseHookEventArgs@)">
            <summary>
            Raises the MouseHookEvent event.
            </summary>
            <param name="e">The MouseHook event details associated
            with this mouse hook event.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.MouseHook.#ctor">
            <summary>
            Constructs a new instance of a MouseHook.
            </summary>
        </member>
        <member name="E:NETXP.Controls.Bars.MouseHook.MouseHookEvent">
            <summary>
            The HookInvoked event is raised whenever the hook fires.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarRenderers.Office2003">
            <summary>
            Provides the Office 2003 look and feel.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.#ctor">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.#ctor(NETXP.Library.IColorTable)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="colorTable"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawContainerBackground(NETXP.Controls.Bars.CommandBarDock,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="dock"></param>
            <param name="g"></param>
            <param name="clip"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawFloatingWindowBackground(NETXP.Controls.Bars.FloatingForm,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="form"></param>
            <param name="bar"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawFloatingWindowButton(NETXP.Controls.Bars.FloatingForm,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.DrawItemState)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="form"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="state"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawCommandBarBackground(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="vertical"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawGripper(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="gripRect"></param>
            <param name="vertical"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawButtonItem(NETXP.Controls.Bars.CommandBarButtonItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rc"></param>
            <param name="dropDown"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawSeparatorItem(NETXP.Controls.Bars.CommandBarSeparatorItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawLabelItem(NETXP.Controls.Bars.CommandBarLabelItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawExpansionItem(NETXP.Controls.Bars.CommandBarExpansionItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
            <param name="dropDown"></param>
            <param name="chevron"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawMenuBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Int32)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="menuGapLocation"></param>
            <param name="menuGapSize"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawMenuButtonItem(NETXP.Controls.Bars.CommandBarButtonItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="menu"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawMenuSeparatorItem(NETXP.Controls.Bars.CommandBarSeparatorItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="menu"></param>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawMenuLabelItem(NETXP.Controls.Bars.CommandBarLabelItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="menu"></param>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawMenuExpansionItem(NETXP.Controls.Bars.CommandBarExpansionItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="menu"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawMenuScrollArrow(System.Drawing.Rectangle,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="bounds"></param>
            <param name="g"></param>
            <param name="up"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawMenuShadowHorizontal(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Int32)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="gr"></param>
            <param name="rect"></param>
            <param name="menuGapLocation"></param>
            <param name="menuGapSize"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawMenuShadowVertical(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="gr"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.DrawComboBox(System.Windows.Forms.ComboBox,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean,NETXP.Controls.Bars.DrawStyle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="box"></param>
            <param name="gi"></param>
            <param name="rect"></param>
            <param name="enabled"></param>
            <param name="rightToLeft"></param>
            <param name="drawStyle"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.Office2003.UpdateColorTable">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarRenderers.Office2003.ColorTable">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP">
            <summary>
            Provides the Office XP look and feel.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.#ctor">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.#ctor(NETXP.Library.IColorTable)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="colorTable"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawContainerBackground(NETXP.Controls.Bars.CommandBarDock,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="dock"></param>
            <param name="g"></param>
            <param name="clip"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawFloatingWindowBackground(NETXP.Controls.Bars.FloatingForm,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="form"></param>
            <param name="bar"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawFloatingWindowButton(NETXP.Controls.Bars.FloatingForm,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.DrawItemState)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="form"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="state"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawCommandBarBackground(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="vertical"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawGripper(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="gripRect"></param>
            <param name="vertical"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawButtonItem(NETXP.Controls.Bars.CommandBarButtonItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rc"></param>
            <param name="dropDown"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawSeparatorItem(NETXP.Controls.Bars.CommandBarSeparatorItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawLabelItem(NETXP.Controls.Bars.CommandBarLabelItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawExpansionItem(NETXP.Controls.Bars.CommandBarExpansionItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
            <param name="dropDown"></param>
            <param name="chevron"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawMenuBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Int32)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="menuGapLocation"></param>
            <param name="menuGapSize"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawMenuButtonItem(NETXP.Controls.Bars.CommandBarButtonItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="menu"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawMenuSeparatorItem(NETXP.Controls.Bars.CommandBarSeparatorItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="menu"></param>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawMenuLabelItem(NETXP.Controls.Bars.CommandBarLabelItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="menu"></param>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawMenuExpansionItem(NETXP.Controls.Bars.CommandBarExpansionItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="menu"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawMenuScrollArrow(System.Drawing.Rectangle,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="bounds"></param>
            <param name="g"></param>
            <param name="up"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawMenuShadowHorizontal(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Int32)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="gr"></param>
            <param name="rect"></param>
            <param name="menuGapLocation"></param>
            <param name="menuGapSize"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawMenuShadowVertical(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="gr"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.DrawComboBox(System.Windows.Forms.ComboBox,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean,NETXP.Controls.Bars.DrawStyle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="box"></param>
            <param name="gi"></param>
            <param name="rect"></param>
            <param name="enabled"></param>
            <param name="rightToLeft"></param>
            <param name="drawStyle"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.UpdateColorTable">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.CommandBarRenderers.OfficeXP.ColorTable">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault">
            <summary>
            Provides the Windows Default look and feel.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.#ctor">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawContainerBackground(NETXP.Controls.Bars.CommandBarDock,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="dock"></param>
            <param name="g"></param>
            <param name="clip"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawFloatingWindowBackground(NETXP.Controls.Bars.FloatingForm,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="form"></param>
            <param name="bar"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawFloatingWindowButton(NETXP.Controls.Bars.FloatingForm,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.DrawItemState)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="form"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="state"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawCommandBarBackground(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="vertical"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawGripper(NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="gripRect"></param>
            <param name="vertical"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawButtonItem(NETXP.Controls.Bars.CommandBarButtonItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rc"></param>
            <param name="dropDown"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawSeparatorItem(NETXP.Controls.Bars.CommandBarSeparatorItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawLabelItem(NETXP.Controls.Bars.CommandBarLabelItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="rc"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawExpansionItem(NETXP.Controls.Bars.CommandBarExpansionItem,NETXP.Controls.Bars.CommandBar,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="rect"></param>
            <param name="dropDown"></param>
            <param name="chevron"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawMenuBackground(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Int32)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="g"></param>
            <param name="rect"></param>
            <param name="menuGapLocation"></param>
            <param name="menuGapSize"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawMenuButtonItem(NETXP.Controls.Bars.CommandBarButtonItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="menu"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawMenuSeparatorItem(NETXP.Controls.Bars.CommandBarSeparatorItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="menu"></param>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawMenuLabelItem(NETXP.Controls.Bars.CommandBarLabelItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="menu"></param>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawMenuExpansionItem(NETXP.Controls.Bars.CommandBarExpansionItem,NETXP.Controls.Bars.CommandContextMenu,System.Drawing.Graphics,System.Windows.Forms.DrawItemState,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="item"></param>
            <param name="menu"></param>
            <param name="g"></param>
            <param name="state"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawMenuScrollArrow(System.Drawing.Rectangle,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="bounds"></param>
            <param name="g"></param>
            <param name="up"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawMenuShadowHorizontal(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Point,System.Int32)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="gr"></param>
            <param name="rect"></param>
            <param name="menuGapLocation"></param>
            <param name="menuGapSize"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawMenuShadowVertical(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="gr"></param>
            <param name="rect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.DrawComboBox(System.Windows.Forms.ComboBox,System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Boolean,NETXP.Controls.Bars.DrawStyle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
            <param name="box"></param>
            <param name="gi"></param>
            <param name="rect"></param>
            <param name="enabled"></param>
            <param name="rightToLeft"></param>
            <param name="drawStyle"></param>
            <returns></returns>
        </member>
        <member name="M:NETXP.Controls.Bars.CommandBarRenderers.WindowsDefault.UpdateColorTable">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.ICommandBarRenderer"/>
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarRenderers.Office2003">
            <summary>
            Provides the Office 2003 look and feel.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.Office2003.#ctor">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.Office2003.#ctor(NETXP.Library.IColorTable)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="colorTable"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.Office2003.DrawItemButton(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarGroup,NETXP.Controls.Bars.ListBarItem,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="group"></param>
            <param name="item"></param>
            <param name="g"></param>
            <param name="skipDraw"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.Office2003.DrawBar(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarGroup,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="group"></param>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.Office2003.DrawButton(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarGroup,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="group"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.Office2003.DrawControlBorder(NETXP.Controls.Bars.ListBar,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.Office2003.DrawBackground(NETXP.Controls.Bars.ListBar,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.Office2003.DrawInsertPoint(NETXP.Controls.Bars.ListBar,System.Drawing.Graphics,NETXP.Controls.Bars.ListBarGroup,NETXP.Controls.Bars.ListBarInsertPoint)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="selectedGroup"></param>
            <param name="dragInsertPoint"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.Office2003.DrawScrollButton(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarScrollButton,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="sb"></param>
            <param name="g"></param>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarRenderers.Office2003.ColorTable">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarRenderers.OfficeXP">
            <summary>
            Provides the Office XP look and feel.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.OfficeXP.#ctor">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.OfficeXP.#ctor(NETXP.Library.IColorTable)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="colorTable"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.OfficeXP.DrawItemButton(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarGroup,NETXP.Controls.Bars.ListBarItem,System.Drawing.Graphics,System.Boolean)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="group"></param>
            <param name="item"></param>
            <param name="g"></param>
            <param name="skipDraw"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.OfficeXP.DrawBar(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarGroup,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="group"></param>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.OfficeXP.DrawButton(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarGroup,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="group"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.OfficeXP.DrawControlBorder(NETXP.Controls.Bars.ListBar,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.OfficeXP.DrawBackground(NETXP.Controls.Bars.ListBar,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.OfficeXP.DrawInsertPoint(NETXP.Controls.Bars.ListBar,System.Drawing.Graphics,NETXP.Controls.Bars.ListBarGroup,NETXP.Controls.Bars.ListBarInsertPoint)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="selectedGroup"></param>
            <param name="dragInsertPoint"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.OfficeXP.DrawScrollButton(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarScrollButton,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="sb"></param>
            <param name="g"></param>
        </member>
        <member name="P:NETXP.Controls.Bars.ListBarRenderers.OfficeXP.ColorTable">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ListBarRenderers.WindowsDefault">
            <summary>
            Provides the Windows Default look and feel.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.WindowsDefault.#ctor">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.WindowsDefault.DrawBar(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarGroup,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="group"></param>
            <param name="g"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.WindowsDefault.DrawButton(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarGroup,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="group"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.WindowsDefault.DrawControlBorder(NETXP.Controls.Bars.ListBar,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.WindowsDefault.DrawBackground(NETXP.Controls.Bars.ListBar,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.WindowsDefault.DrawInsertPoint(NETXP.Controls.Bars.ListBar,System.Drawing.Graphics,NETXP.Controls.Bars.ListBarGroup,NETXP.Controls.Bars.ListBarInsertPoint)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="selectedGroup"></param>
            <param name="dragInsertPoint"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.ListBarRenderers.WindowsDefault.DrawScrollButton(NETXP.Controls.Bars.ListBar,NETXP.Controls.Bars.ListBarScrollButton,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IListBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="sb"></param>
            <param name="g"></param>
        </member>
        <member name="T:NETXP.Controls.Bars.StatusBarRenderers.Office2003">
            <summary>
            Provides the Office 2003 look and feel.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.IStatusBarRenderer">
            <summary>
            Defines a status bar renderer.
            This allows full control over how status bars are drawn.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.IStatusBarRenderer.DrawBackground(NETXP.Controls.Bars.StatusBar,System.Drawing.Graphics)">
            <summary>
            Draws the status bar background.
            </summary>
            <param name="bar">The status bar.</param>
            <param name="g">The graphics object.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.IStatusBarRenderer.DrawSizeGrip(NETXP.Controls.Bars.StatusBar,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the sizing grip.
            </summary>
            <param name="bar">The status bar.</param>
            <param name="g">The graphics object.</param>
            <param name="bounds">The bounds of the size grip.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.IStatusBarRenderer.DrawItem(NETXP.Controls.Bars.StatusBar,System.Windows.Forms.StatusBarDrawItemEventArgs)">
            <summary>
            Draws an owner-drawn status bar panel.
            </summary>
            <param name="bar">The status bar.</param>
            <param name="sbdevent">The event args specifying the panel.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.IStatusBarRenderer.DrawProgressBar(NETXP.Controls.Bars.StatusBar,System.Windows.Forms.StatusBarDrawItemEventArgs,NETXP.Controls.Bars.ProgressPanel)">
            <summary>
            Draws the progress bar panel.
            </summary>
            <param name="bar">The status bar.</param>
            <param name="sbdevent">The event args specifying the panel.</param>
            <param name="panel">The progress bar panel.</param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.Office2003.#ctor">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.Office2003.#ctor(NETXP.Library.IColorTable)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="colorTable"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.Office2003.DrawBackground(NETXP.Controls.Bars.StatusBar,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.Office2003.DrawSizeGrip(NETXP.Controls.Bars.StatusBar,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="gripRect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.Office2003.DrawProgressBar(NETXP.Controls.Bars.StatusBar,System.Windows.Forms.StatusBarDrawItemEventArgs,NETXP.Controls.Bars.ProgressPanel)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="sbdevent"></param>
            <param name="ProgressPanel"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.Office2003.DrawItem(NETXP.Controls.Bars.StatusBar,System.Windows.Forms.StatusBarDrawItemEventArgs)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="sbdevent"></param>
        </member>
        <member name="P:NETXP.Controls.Bars.StatusBarRenderers.Office2003.ColorTable">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.StatusBarRenderers.OfficeXP">
            <summary>
            Provides the Office XP look and feel.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.OfficeXP.#ctor">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.OfficeXP.#ctor(NETXP.Library.IColorTable)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="colorTable"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.OfficeXP.DrawBackground(NETXP.Controls.Bars.StatusBar,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.OfficeXP.DrawSizeGrip(NETXP.Controls.Bars.StatusBar,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="gripRect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.OfficeXP.DrawProgressBar(NETXP.Controls.Bars.StatusBar,System.Windows.Forms.StatusBarDrawItemEventArgs,NETXP.Controls.Bars.ProgressPanel)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="sbdevent"></param>
            <param name="ProgressPanel"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.OfficeXP.DrawItem(NETXP.Controls.Bars.StatusBar,System.Windows.Forms.StatusBarDrawItemEventArgs)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="sbdevent"></param>
        </member>
        <member name="P:NETXP.Controls.Bars.StatusBarRenderers.OfficeXP.ColorTable">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.StatusBarRenderers.WindowsDefault">
            <summary>
            Provides the Windows default look and feel.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.WindowsDefault.#ctor">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.WindowsDefault.DrawBackground(NETXP.Controls.Bars.StatusBar,System.Drawing.Graphics)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.WindowsDefault.DrawSizeGrip(NETXP.Controls.Bars.StatusBar,System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="g"></param>
            <param name="gripRect"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.WindowsDefault.DrawProgressBar(NETXP.Controls.Bars.StatusBar,System.Windows.Forms.StatusBarDrawItemEventArgs,NETXP.Controls.Bars.ProgressPanel)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="sbdevent"></param>
            <param name="ProgressPanel"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBarRenderers.WindowsDefault.DrawItem(NETXP.Controls.Bars.StatusBar,System.Windows.Forms.StatusBarDrawItemEventArgs)">
            <summary>
            Internal. See <see cref="T:NETXP.Controls.Bars.IStatusBarRenderer"/>
            </summary>
            <param name="bar"></param>
            <param name="sbdevent"></param>
        </member>
        <member name="T:NETXP.Controls.Bars.StatusBar">
            <summary>
            The extended status bar control supporting custom renderers and progress bars.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBar.#ctor">
            <summary>
            Constructs a new StatusBar.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBar.OnDrawItem(System.Windows.Forms.StatusBarDrawItemEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="sbdevent"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBar.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBar.OnResize(System.EventArgs)">
            <summary>
            Internal
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBar.SetStatusText(System.String)">
            <summary>
            IStatusMessageAcceptor method.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:NETXP.Controls.Bars.StatusBar.ClearStatusText">
            <summary>
            IStatusMessageAcceptor method.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.StatusBar.ShowSizeGrip">
            <summary>
            Show the sizing grip to the right of the status bar?
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.StatusBar.Renderer">
            <summary>
            Gets or sets the renderer associated with this status bar.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.StatusBar.Dock">
            <summary>
            Gets or sets the position and manner in which the status bar is docked.
            </summary>
        </member>
        <member name="T:NETXP.Controls.Bars.ProgressPanel">
            <summary>
            Provides a progress bar panel for the NetXP status bar.
            </summary>
        </member>
        <member name="M:NETXP.Controls.Bars.ProgressPanel.#ctor">
            <summary>
            Constructs a new ProgressPanel.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ProgressPanel.Minimum">
            <summary>
            Gets or sets the minimum value for the progress bar.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ProgressPanel.Maximum">
            <summary>
            Gets or sets the maximum value for the progress bar.
            </summary>
        </member>
        <member name="P:NETXP.Controls.Bars.ProgressPanel.Value">
            <summary>
            Gets or sets the actual value of the progress bar.
            </summary>
        </member>
    </members>
</doc>
